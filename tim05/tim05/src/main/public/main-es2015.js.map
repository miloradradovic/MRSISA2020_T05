{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/add-appointment-type/add-appointment-type.component.ts","./src/app/add-appointment-type/add-appointment-type.component.html","./src/app/add-clinic-administrator-form/add-clinic-administrator-form.component.ts","./src/app/add-clinic-administrator-form/add-clinic-administrator-form.component.html","./src/app/add-clinic-center-administrator-form/add-clinic-center-administrator-form.component.ts","./src/app/add-clinic-center-administrator-form/add-clinic-center-administrator-form.component.html","./src/app/add-clinic-form/add-clinic-form.component.ts","./src/app/add-clinic-form/add-clinic-form.component.html","./src/app/add-diagnosis-form/add-diagnosis-form.component.ts","./src/app/add-diagnosis-form/add-diagnosis-form.component.html","./src/app/add-doctor-form/add-doctor-form.component.ts","./src/app/add-doctor-form/add-doctor-form.component.html","./src/app/add-hall-form/add-hall-form.component.ts","./src/app/add-hall-form/add-hall-form.component.html","./src/app/add-medicine-form/add-medicine-form.component.ts","./src/app/add-medicine-form/add-medicine-form.component.html","./src/app/add-nurse-form/add-nurse-form.component.ts","./src/app/add-nurse-form/add-nurse-form.component.html","./src/app/add-predifined-appointment/add-predifined-appointment.component.ts","./src/app/add-predifined-appointment/add-predifined-appointment.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/directive/RequiredPassDirective.ts","./src/app/edit-clinic-administrator/edit-clinic-administrator.component.ts","./src/app/edit-clinic-administrator/edit-clinic-administrator.component.html","./src/app/edit-clinic-center-administrator/edit-clinic-center-administrator.component.ts","./src/app/edit-clinic-center-administrator/edit-clinic-center-administrator.component.html","./src/app/edit-medical-staff/edit-medical-staff.component.ts","./src/app/edit-medical-staff/edit-medical-staff.component.html","./src/app/edit-patient/edit-patient.component.ts","./src/app/edit-patient/edit-patient.component.html","./src/app/guards/clinic-admin-guard.service.ts","./src/app/guards/clinic-center-admin-guard.service.ts","./src/app/guards/login-guard.service.ts","./src/app/guards/medicall-stuff-guard.service.ts","./src/app/guards/patient-guard.service.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/navigation/navigation.component.ts","./src/app/navigation/navigation.component.html","./src/app/patient/clinics/clinics.component.ts","./src/app/patient/clinics/clinics.component.html","./src/app/request-list-patients/request-list-patients.component.ts","./src/app/request-list-patients/request-list-patients.component.html","./src/app/request-list-patients/dialog-overview.html","./src/app/services/authentication.service.ts","./src/app/services/interceptor.service.ts","./src/app/view-clinic-administrator/view-clinic-administrator.component.ts","./src/app/view-clinic-administrator/view-clinic-administrator.component.html","./src/app/view-clinic-center-administrator/view-clinic-center-administrator.component.ts","./src/app/view-clinic-center-administrator/view-clinic-center-administrator.component.html","./src/app/view-clinics/view-clinics.component.ts","./src/app/view-clinics/view-clinics.component.html","./src/app/view-medical-staff/view-medical-staff.component.ts","./src/app/view-medical-staff/view-medical-staff.component.html","./src/app/view-patient/view-patient.component.ts","./src/app/view-patient/view-patient.component.html","./src/app/view-patients-nurse/view-patients-nurse.component.ts","./src/app/view-patients-nurse/view-patients-nurse.component.html","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-add-appointment-type',\r\n  templateUrl: './add-appointment-type.component.html',\r\n  styleUrls: ['./add-appointment-type.component.css']\r\n})\r\nexport class AddAppointmentTypeComponent implements OnInit {\r\n\r\n  model : AppointmentTypeModel = {\r\n    name : '',\r\n    admin_id : parseInt(sessionStorage.getItem('id'))\r\n  }\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  addAppointmentType() : void {\r\n    let url = \"http://localhost:8081/appointmentType/addAppointmentType\";\r\n    this.model.admin_id = parseInt(sessionStorage.getItem('user_id'));\r\n    console.log(this.model.admin_id);\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Appointment type successfully added\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        this._snackBar.open(\"Error has occurred while adding appointment type\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n        console.log(err);\r\n      });\r\n    }\r\n\r\n    checkValidation() : boolean {\r\n      return (/^[a-zA-z]+$/.test(this.model.name));\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport interface AppointmentTypeModel{\r\n    name: string;\r\n    admin_id : number;\r\n\r\n}\r\n","<br>\n<h1 style=\"margin-left: 30px;\">Add new appointment: </h1>\n<mat-divider></mat-divider>\n<br>\n\n<div >\n  <form name=\"form\" #f=\"ngForm\" (submit)=\"addAppointmentType()\" style=\"padding-left: 25px;\">\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\n      <mat-label>Pick a name</mat-label>\n      <input [(ngModel)]=\"model.name\" name=\"appointment_name\" matInput pattern=\"[A-Z][a-z]*\" required>\n    </mat-form-field>\n\n    <br>\n    <br>\n\n    <button mat-raised-button >Add appointment</button>\n\n\n\n  </form>\n</div>","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-add-admin-form',\r\n    templateUrl: './add-clinic-administrator-form.component.html',\r\n    styleUrls: ['./add-clinic-administrator-form.component.css']\r\n})\r\nexport class AddClinicAdminFromComponent implements OnInit{\r\n\r\n        model: clinicAdminModel = {\r\n        name: '',\r\n        surname: '',\r\n        email: '',\r\n        password: '',\r\n        clinic: new class implements clinicModel {\r\n          address: string;\r\n          description: string;\r\n          name: string | RegExp;\r\n        }\r\n    }\r\n    clinics: any=[];\r\n    hide: boolean;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient){\r\n\r\n    }\r\n\r\n\r\n    ngOnInit(): void{\r\n         this.http.get(\"http://localhost:8081/clinic/getClinics\")\r\n          .subscribe((res)=>{\r\n            this.clinics = res;\r\n            this.model.clinic = res[0];\r\n        });\r\n        this.hide = true;\r\n    }\r\n\r\n    AddClinicAdmin(): void{\r\n        let url = \"http://localhost:8081/clinicAdministrator/addClinicAdministrator\"\r\n        this.http.post(url, this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Admin added successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n                if(err.status == 409)\r\n                {\r\n                  this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n                    duration: 2000,\r\n                  });\r\n\r\n                }\r\n                else\r\n                {\r\n                  this._snackBar.open(\"Error has occurred while adding admin!\", \"Close\", {\r\n                    duration: 2000,\r\n                  });\r\n\r\n                  console.log(err);\r\n                }\r\n            }\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport interface clinicAdminModel\r\n{\r\n    name: string | RegExp;\r\n    surname: string | RegExp;\r\n    email: string | RegExp;\r\n    password: string;\r\n    clinic: clinicModel;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new clinic administrator: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && AddClinicAdmin()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             required minlength=\"8\"\r\n             [type]=\"hide ? 'password' : 'text'\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 300px;\">\r\n      <mat-label>Clinic</mat-label>\r\n      <mat-select  [(ngModel)] = \"model.clinic\" name=\"input_clinic\" #clinic=\"ngModel\">\r\n        <mat-option  *ngFor=\"let c of clinics\" [value]=\"c\"> {{c.name}}, {{c.address}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add clinic administrator</button>\r\n\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {ReactiveFormsModule}  from \"@angular/forms\";\r\n\r\n@Component({\r\n    selector: 'app-add-admin-clinic-form',\r\n    templateUrl: './add-clinic-center-administrator-form.component.html',\r\n    styleUrls: ['./add-clinic-center-administrator-form.component.css']\r\n})\r\nexport class AddClinicCenterAdminFromComponent implements OnInit{\r\n\r\n    model: clinicCenterAdminModel = {\r\n        name: '',\r\n        surname: '',\r\n        email: '',\r\n        password: ''\r\n    }\r\n  hide: boolean;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient){\r\n\r\n    }\r\n\r\n    ngOnInit(): void{\r\n        this.hide = true;\r\n    }\r\n\r\n    AddClinicCenterAdmin(): void{\r\n        let url = \"http://localhost:8081/clinicCenterAdministrator/addClinicCenterAdministrator\"\r\n        this.http.post(url, this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Clinic center administrator added successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n              if(err.status == 409)\r\n              {\r\n                this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n                  duration: 2000,\r\n                });\r\n\r\n              }\r\n              else\r\n              {\r\n                this._snackBar.open(\"Error has occurred while adding clinic center administrator!\", \"Close\", {\r\n                  duration: 2000,\r\n                });\r\n                console.log(err);\r\n              }\r\n            }\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport interface clinicCenterAdminModel\r\n{\r\n    name: string | RegExp;\r\n    surname: string | RegExp;\r\n    email: string | RegExp;\r\n    password: string;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new clinic center administrator: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && AddClinicCenterAdmin()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n            required minlength=\"8\"  [type]=\"hide ? 'password' : 'text'\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add clinic center administrator</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n    selector: 'app-add-clinic-form',\r\n    templateUrl: './add-clinic-form.component.html',\r\n    styleUrls: ['./add-clinic-form.component.css']\r\n})\r\nexport class AddClinicFromComponent implements OnInit{\r\n\r\n    model: clinicModel = {\r\n        name: '',\r\n        address: '',\r\n        description: ''\r\n    }\r\n\r\n    ngOnInit(): void{\r\n\r\n    }\r\n\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient){\r\n\r\n    }\r\n\r\n    AddClinic(): void{\r\n        let url = \"http://localhost:8081/clinic/addClinic\"\r\n        this.http.post(url, this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Clinic added successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n              if(err.status == 409)\r\n              {\r\n                this._snackBar.open(\"Clinic already exists!\", \"Close\", {\r\n                  duration: 2000,\r\n                });\r\n\r\n              }\r\n              else\r\n              {\r\n                this._snackBar.open(\"Error has occurred while adding clinic!\", \"Close\", {\r\n                  duration: 2000,\r\n                });\r\n\r\n                console.log(err);\r\n              }\r\n            }\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport interface clinicModel\r\n{\r\n    name: string | RegExp;\r\n    address: string | RegExp;\r\n    description: string | RegExp;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new clinic: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && AddClinic()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Brooklyn Hospital\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Address</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.address\" #address=\"ngModel\"  name=\"input_address\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}[0-9]+\" required>\r\n      <mat-error *ngIf=\"address.invalid && address.errors?.pattern\">\r\n        Invalid name format! Example: Saint Patric 5\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Description</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.description\" #description=\"ngModel\"  name=\"input_description\"\r\n            pattern=\"([A-Z][a-z]+[ a-z.,0-9]*){1,}\" required>\r\n      <mat-error *ngIf=\"address.invalid && address.errors?.pattern\">\r\n        Invalid description format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add clinic</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { Router} from \"@angular/router\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'app-add-diagnosis-form',\r\n  templateUrl: './add-diagnosis-form.component.html',\r\n  styleUrls: ['./add-diagnosis-form.component.css']\r\n})\r\nexport class AddDiagnosisFormComponent implements OnInit{\r\n\r\n  model: diagnosisModel = {\r\n    name: '',\r\n    description: ''\r\n  }\r\n  buttonType: string;\r\n\r\n  ngOnInit(): void{\r\n\r\n  }\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient, private router: Router){\r\n\r\n  }\r\n\r\n  AddDiagnosis(): void{\r\n    let url = \"http://localhost:8081/diagnosis/addDiagnosis\"\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n\r\n        this._snackBar.open(\"Diagnosis added successfully!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          this._snackBar.open(\"Diagnosis already exists!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while adding diagnosis!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  onSubmit(buttonType): void {\r\n    if(buttonType===\"Add\"){\r\n      this.AddDiagnosis();\r\n    }\r\n    if(buttonType===\"Leave\"){\r\n      this.AddDiagnosis();\r\n      this.router.navigateByUrl('/');\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport interface diagnosisModel\r\n{\r\n  name: string | RegExp;\r\n  description: string | RegExp;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new diagnosis: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (ngSubmit)=\" f.form.valid && onSubmit(buttonType)\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid diagnosis name format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Description</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.description\" #description=\"ngModel\"  name=\"input_description\"\r\n             pattern=\"([A-Z][a-z]+[ a-z.,0-9]*){1,}\" required>\r\n      <mat-error *ngIf=\"description.invalid && description.errors?.pattern\">\r\n        Invalid diagnosis description format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button  (click)=\"onSubmit('Add')\">Add diagnosis</button>\r\n    <br> <br>\r\n    <button mat-raised-button (click)=\"onSubmit('Leave')\" >Add diagnosis and leave</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'app-add-doctor-form',\r\n  templateUrl: './add-doctor-form.component.html',\r\n  styleUrls: ['./add-doctor-form.component.css']\r\n})\r\nexport class AddDoctorFormComponent implements OnInit {\r\n\r\n  model: doctorModel = {\r\n    name : '',\r\n    surname : '',\r\n    email : '',\r\n    password : '',\r\n    workEnd : '',\r\n    workStart : '',\r\n    appointment_type_id : 0,\r\n    //ovde treba preuzeti od administratora koji dodaje kliniku zapravo\r\n    clinic_id : null\r\n  }\r\n\r\n  appointmentTypes : any=[];\r\n\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    let url = \"http://localhost:8081/appointmentType/getAppointmentTypes\";\r\n    this.http.get(url).subscribe(\r\n      res => {\r\n            this.appointmentTypes = res;\r\n      });\r\n\r\n    let params1 = new HttpParams().set('admin_id',sessionStorage.getItem('user_id'))\r\n    this.http.get(\"http://localhost:8081/clinicAdministrator/getAdminsClinic\",{params:params1}).subscribe(\r\n        res => {\r\n              this.model.clinic_id = res;\r\n              \r\n        });\r\n\r\n\r\n  }\r\n\r\n  addDoctor(): void{\r\n    let url =  \"http://localhost:8081/doctors/addDoctor\"\r\n    this.http.post(url,this.model).subscribe(\r\n        res => {\r\n          this._snackBar.open(\"Doctor added successfully\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        },\r\n        err => {\r\n          this._snackBar.open(\"Error has occurred while adding doctor\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n          console.log(err)\r\n        }\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport interface doctorModel\r\n{\r\n    name: string;\r\n    surname: string;\r\n    email : string;\r\n    password : string;\r\n    workStart : string;\r\n    workEnd : string;\r\n    appointment_type_id : number;\r\n    clinic_id : any;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new doctor: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"addDoctor()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             required minlength=\"8\"\r\n             [type]=\"hide ? 'password' : 'text'\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\" style=\"width: 250px;\">\r\n        Password must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field> \r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 200px;\" >\r\n      <input [(ngModel)] = \"model.workEnd\" name=\"input_workEnd\"\r\n      #workEnd=\"ngModel\" matInput placeholder=\"Work start\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime1\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime1></ngx-material-timepicker>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 225px;\" >\r\n      <input [(ngModel)] = \"model.workStart\" name=\"input_workStart\"\r\n      #workStart=\"ngModel\" matInput placeholder=\"Work end\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime2\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime2></ngx-material-timepicker>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 300px;\">\r\n      <mat-label>Appointment type</mat-label>\r\n      <mat-select  [(ngModel)] = \"model.appointment_type_id\" name=\"input_appointmentType\" #appointmentType=\"ngModel\" required>\r\n        <mat-option  *ngFor=\"let a of appointmentTypes\" [value]=\"a.id\"> {{a.name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add doctor</button>\r\n\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit, ViewChild, ChangeDetectorRef} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n    selector: 'app-add-hall-form',\r\n    templateUrl: './add-hall-form.component.html',\r\n    styleUrls: ['./add-hall-form.component.css']\r\n})\r\nexport class AddHallFormComponent implements OnInit{\r\n\r\n    displayedColumns: string[] = ['name', 'number', 'delete'];\r\n\r\n    dataSource = new MatTableDataSource();\r\n\r\n    selectedRowIndex: number = 0;\r\n\r\n    model: hallModel = {\r\n        name: '',\r\n        number: 0\r\n    }\r\n\r\n    clinic_id : any = '';\r\n\r\n    deleteModel : deleteHall = {\r\n        hall_id : 0\r\n    }\r\n\r\n    @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient,private changeDetectorRefs: ChangeDetectorRef){\r\n\r\n    }\r\n\r\n\r\n    ngOnInit(): void{\r\n      //vrednost parametra clinic_id treba da se dinamicki popuni tako da se preuzimaju hale tacno odredjene klinike.\r\n\r\n      let params1 = new HttpParams().set('admin_id',sessionStorage.getItem('user_id'))\r\n\r\n      this.http.get(\"http://localhost:8081/clinicAdministrator/getAdminsClinic\",{params:params1}).subscribe(\r\n        res => {\r\n          this.clinic_id = res.toString();\r\n          let params = new HttpParams().set('clinic_id', this.clinic_id);\r\n          this.http.get(\"http://localhost:8081/halls/getClinicHall\",{params:params})\r\n          .subscribe((res) => {\r\n          // @ts-ignore\r\n             this.dataSource.data = res;\r\n\r\n          });\r\n        });\r\n\r\n        let params = new HttpParams().set('clinic_id', \"1\");\r\n        this.http.get(\"http://localhost:8081/halls/getClinicHall\",{params:params})\r\n        .subscribe((res) => {\r\n        // @ts-ignore\r\n           this.dataSource.data = res;\r\n      });\r\n\r\n        this.dataSource.paginator = this.paginator;\r\n    }\r\n\r\n    AddHall(): void{\r\n        let url = \"http://localhost:8081/halls/addHall\"\r\n        this.http.post(url, this.model).subscribe(\r\n            res => {\r\n\r\n              //kada dobijem odgovor da sam uspeo da dodam salu hocu da posaljem upit za uzimanje svih sala da bih u tabeli prikazao\r\n              let params = new HttpParams().set('clinic_id', this.clinic_id);\r\n              this.http.get(\"http://localhost:8081/halls/getClinicHall\",{params:params})\r\n              .subscribe((res) => {\r\n              // @ts-ignore\r\n              this.dataSource.data = res;\r\n\r\n              });\r\n\r\n              this._snackBar.open(\"Hall added successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n          err => {\r\n            if(err.status == 409)\r\n            {\r\n              this._snackBar.open(\"Hall name/number already taken!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            }\r\n            else\r\n            {\r\n              this._snackBar.open(\"Error has occurred while adding hall!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            }\r\n          }\r\n        );\r\n    }\r\n\r\n    deleteHall(element): void{\r\n        let params = new HttpParams().set(\"hall_id\", element.id.toString());\r\n        this.http.delete(\"http://localhost:8081/halls/deleteHall\",{params:params}).subscribe(\r\n          res =>{\r\n            console.log(\"inside the res\");\r\n            let index = this.dataSource.data.indexOf(element);\r\n            this.dataSource.data.splice(index,1);\r\n            this.dataSource._updateChangeSubscription();\r\n            this._snackBar.open(\"Hall deleted successfully.\", \"Close\", {\r\n            duration: 2000,\r\n            });\r\n          }\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport interface hallModel\r\n{\r\n    name: string | RegExp;\r\n    number: Number | RegExp;\r\n}\r\n\r\nexport interface deleteHall{\r\n    hall_id : number;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new hall: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && AddHall()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Operation Hall\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.number\" #number=\"ngModel\"  name=\"input_number\"\r\n             pattern=\"[0-9]*\" required>\r\n      <mat-error *ngIf=\"number.invalid && number.errors?.pattern\">\r\n        Invalid number format! Example: 5\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <button mat-raised-button style=\"margin-left: 25px;\" >Save hall</button>\r\n\r\n    <br>\r\n\r\n    <div class=\"mat-elevation-z8\" style=\"width: 650px;float:left;margin-top: 2%;\">\r\n\r\n      <table mat-table [dataSource]=\"dataSource\" >\r\n\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> Name </th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"number\">\r\n              <th mat-header-cell *matHeaderCellDef> Number </th>\r\n              <td mat-cell *matCellDef=\"let element\"> {{element.number}} </td>\r\n            </ng-container>\r\n\r\n          <ng-container matColumnDef=\"delete\">\r\n              <th mat-header-cell *matHeaderCellDef> Delete </th>\r\n              <td mat-cell *matCellDef=\"let element\" (click)=\"deleteHall(element)\" style=\"width: 150px;\"><span class=\"fake-link\"><mat-icon [ngStyle]=\"{'color':'red'}\">clear</mat-icon></span></td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\" ></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" ></tr>\r\n\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"[5]\" showFirstLastButtons></mat-paginator>\r\n\r\n     </div>\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { Router} from \"@angular/router\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'app-add-medicine-form',\r\n  templateUrl: './add-medicine-form.component.html',\r\n  styleUrls: ['./add-medicine-form.component.css']\r\n})\r\nexport class AddMedicineFromComponent implements OnInit{\r\n\r\n  model: medicineModel = {\r\n    name: '',\r\n    description: '',\r\n    authenticated: false\r\n  }\r\n  buttonType: string;\r\n\r\n  ngOnInit(): void{\r\n\r\n  }\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient, private router: Router){\r\n\r\n  }\r\n\r\n  AddMedicine(): void{\r\n    let url = \"http://localhost:8081/medicine/addMedicine\"\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Medicine added successfully!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          this._snackBar.open(\"Medicine already exists!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while adding medicine!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  onSubmit(buttonType): void {\r\n\r\n    if(buttonType===\"Add\"){\r\n      this.AddMedicine();\r\n    }\r\n    if(buttonType===\"Leave\"){\r\n      this.AddMedicine();\r\n      this.router.navigateByUrl('/');\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport interface medicineModel\r\n{\r\n  name: string | RegExp;\r\n  description: string;\r\n  authenticated: boolean;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new medicine: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (ngSubmit)=\" f.form.valid && onSubmit(buttonType)\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid medicine name format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Description</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.description\" #description=\"ngModel\"  name=\"input_description\"\r\n            pattern=\"([A-Z][a-z]+[ a-z.,0-9]*){1,}\" required>\r\n      <mat-error *ngIf=\"description.invalid && description.errors?.pattern\">\r\n        Invalid medicine description format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button  (click)=\"onSubmit('Add')\">Add medicine</button>\r\n    <br> <br>\r\n    <button mat-raised-button (click)=\"onSubmit('Leave')\" >Add medicine and leave</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'app-add-doctor-form',\r\n  templateUrl: './add-nurse-form.component.html',\r\n  styleUrls: ['./add-nurse-form.component.css']\r\n})\r\nexport class AddNurseFormComponent implements OnInit {\r\n\r\n  model: nurseModel = {\r\n    name : '',\r\n    surname : '',\r\n    email : '',\r\n    password : '',\r\n    workEnd : '',\r\n    workStart : '',\r\n  }\r\n\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  addNurse(): void{\r\n    let url =  \"http://localhost:8081/nurse/addNurse\"\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Nurse added successfully\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409){\r\n          this._snackBar.open(\"Nurse with that email already exists!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n        }else{\r\n          this._snackBar.open(\"Error has occurred while adding nurse\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport interface nurseModel\r\n{\r\n  name: string;\r\n  surname: string;\r\n  email : string;\r\n  password : string;\r\n  workStart : string;\r\n  workEnd : string;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new nurse: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"addNurse()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             required minlength=\"8\"\r\n             [type]=\"hide ? 'password' : 'text'\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\" style=\"width: 250px;\">\r\n        Password must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 200px;\" >\r\n      <input [(ngModel)] = \"model.workEnd\" name=\"input_workEnd\"\r\n             #workEnd=\"ngModel\" matInput placeholder=\"Work start\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime1\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime1></ngx-material-timepicker>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 225px;\" >\r\n      <input [(ngModel)] = \"model.workStart\" name=\"input_workStart\"\r\n             #workStart=\"ngModel\" matInput placeholder=\"Work end\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime2\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime2></ngx-material-timepicker>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add nurse</button>\r\n\r\n\r\n\r\n  </form>\r\n</div>\r\n","import { Component, OnInit} from '@angular/core';\nimport {HttpClient, HttpParams} from '@angular/common/http';\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-add-predifined-appointment',\n  templateUrl: './add-predifined-appointment.component.html',\n  styleUrls: ['./add-predifined-appointment.component.css']\n})\nexport class AddPredifinedAppointmentComponent implements OnInit {\n\n  doctors: any=[];\n  halls: any=[];\n  appointmentTypes: any = [];\n  duration_invalid : boolean = true;\n\n  durControl : FormControl = new FormControl(10, [Validators.max(60), Validators.min(10)])\n\n  model : appointmentModel = {\n    date_field : null,\n    date : '',\n    time : '',\n    duration : 0,\n    price : 0,\n    request : false,\n    predefined : true,\n    doctor_id : null,\n    hall_id : null,\n    appointmentType_id: null,\n    clinic_id : 1\n  };\n\n\n\n  constructor(private _snackBar: MatSnackBar,private http: HttpClient) {\n      \n   }\n  /**  Treba dodati deo u kom se inicijalizuje za koju kliniku se trazi admin\n   * u ovom slucaju je to hardcodovana vrednost jer jos nemamo logovanje **/\n\n  ngOnInit(): void {\n\n    let params1 = new HttpParams().set('admin_id',sessionStorage.getItem('user_id'))\n    this.http.get(\"http://localhost:8081/clinicAdministrator/getAdminsClinic\",{params:params1}).subscribe(\n      res => {\n            this.model.clinic_id = res;\n            console.log(this.model.clinic_id);\n            let params = new HttpParams().set('clinic_id', this.model.clinic_id.toString() );\n            let url = \"http://localhost:8081/halls/getClinicHall\";\n            this.http.get(url,{params:params}).subscribe(\n              res => {\n                    this.halls = res;\n              });\n            \n            \n      });\n    console.log(sessionStorage.getItem('token'));\n    this.http.get(\"http://localhost:8081/appointmentType/getAppointmentTypes\").subscribe(\n        res => {\n              this.appointmentTypes = res;\n        });\n\n\n  }\n\n  addAppointment() : void {\n    let url = \"http://localhost:8081/appointment/addAppointment\";\n    this.model.date = this.model.date_field.getDate() + \"/\" + (this.model.date_field.getMonth()+1) + \"/\" + this.model.date_field.getFullYear();\n    this.model.duration = this.durControl.value;\n    this.http.post(url, this.model).subscribe(\n      res => {\n            this._snackBar.open(\"Appointment added successfully\", \"Close\", {\n              duration: 2000,\n      });\n    });\n\n  }\n\n  onChange() {\n    let params = new HttpParams();\n    params = params.append('clinic_id', this.model.clinic_id.toString());\n    params = params.append('appointment_type_id',this.model.appointmentType_id.toString());\n    let url = \"http://localhost:8081/doctors/getDoctorsAppointment\";;\n    this.http.get(url,{params:params}).subscribe(\n      res => {\n            this.doctors = res;\n      });\n    \n    \n    \n}\n\n}\n\nexport interface appointmentModel\n{\n    date_field : Date;\n    date : string;\n    time : string;\n    duration : number;\n    price : number;\n    request : boolean;\n    predefined : boolean;\n    doctor_id : number;\n    hall_id : number;\n    appointmentType_id: number;\n    clinic_id :any;\n    \n}\n\n","<br>\n<h1 style=\"margin-left: 30px;\">Add new appointment: </h1>\n<mat-divider></mat-divider>\n<br>\n\n<div >\n  <form  #f=\"ngForm\" (submit)=\"addAppointment()\" style=\"padding-left: 25px;\">\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\n      <mat-label>Choose a date</mat-label>\n      <input [(ngModel)] = \"model.date_field\" name=\"input_date_field\"\n      #date_field=\"ngModel\" matInput [matDatepicker]=\"picker\" readonly required>\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n      <mat-datepicker #picker ></mat-datepicker>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 200px;\" >\n      <input [(ngModel)] = \"model.time\" name=\"input_time\"\n      #time=\"ngModel\" matInput placeholder=\"Enter time\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime\" [format]=\"24\"  readonly required>\n    </mat-form-field>\n\n    <ngx-material-timepicker #fullTime></ngx-material-timepicker>\n\n\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px;width: 200px;\">\n      <mat-label>Duration</mat-label>\n      <input name=\"input_duration\" matInput type=\"number\" placeholder=\"Ex. 12\" min=\"10\" max=\"60\" [formControl]=\"durControl\" required>\n      <span matSuffix>min</span>\n    </mat-form-field>\n\n    <br>\n    <br>\n\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\n      <mat-label>Appointment type</mat-label>\n      <mat-select [(ngModel)] = \"model.appointmentType_id\" name=\"input_appointmentType_id\"\n      #appointmentType_id=\"ngModel\" (ngModelChange)=\"onChange()\" required>\n      <mat-option *ngFor=\"let a of appointmentTypes\" [value]=\"a.id\" >{{a.name}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px;width: 260px;\">\n      <mat-label>Doctor</mat-label>\n      <mat-select [(ngModel)] = \"model.doctor_id\" name=\"input_doctor_id\"\n      #doctor_id=\"ngModel\" required >\n      <mat-option *ngFor=\"let d of doctors\" [value]=\"d.id\" >{{d.name}} {{d.surname}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <br>\n    <br>\n\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\n      <mat-label>Hall</mat-label>\n      <mat-select [(ngModel)] = \"model.hall_id\" name=\"input_hall_id\"\n      #hall_id=\"ngModel\" required>\n        <mat-option *ngFor=\"let h of halls\" [value]=\"h.id\" >{{h.name}} {{h.number}}</mat-option>\n      </mat-select>\n    </mat-form-field>\n\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px;width: 260px;\">\n      <mat-label>Price</mat-label>\n      <input  [(ngModel)] = \"model.price\" name=\"input_price\"\n      #price=\"ngModel\"  matInput type=\"number\" min = \"1000\">\n      <span matSuffix>$</span>\n    </mat-form-field>\n\n    <br>\n    <br>\n\n    <button mat-raised-button >Add appointment</button>\n\n\n\n  </form>\n</div>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 't05-ng-app';\r\n}\r\n","<div>\r\n  <app-navigation></app-navigation>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatNativeDateModule} from '@angular/material/core';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {NgxMaterialTimepickerModule} from 'ngx-material-timepicker';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport { AppComponent } from './app.component';\r\nimport { NavigationComponent } from './navigation/navigation.component';\r\nimport { Routes, RouterModule} from \"@angular/router\";\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport { AddDoctorFormComponent } from './add-doctor-form/add-doctor-form.component';\r\nimport { AddClinicCenterAdminFromComponent } from './add-clinic-center-administrator-form/add-clinic-center-administrator-form.component';\r\nimport { AddClinicFromComponent } from './add-clinic-form/add-clinic-form.component';\r\nimport { AddClinicAdminFromComponent } from './add-clinic-administrator-form/add-clinic-administrator-form.component';\r\nimport { EditPatientProfile } from './edit-patient/edit-patient.component';\r\nimport { AddHallFormComponent } from './add-hall-form/add-hall-form.component';\r\nimport { EditMedicalStaff } from './edit-medical-staff/edit-medical-staff.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\"\r\nimport {AddMedicineFromComponent} from \"./add-medicine-form/add-medicine-form.component\";\r\nimport {AddDiagnosisFormComponent} from \"./add-diagnosis-form/add-diagnosis-form.component\";\r\nimport {DialogOverview, RequestListPatientsComponent} from \"./request-list-patients/request-list-patients.component\";\r\nimport { AddPredifinedAppointmentComponent } from './add-predifined-appointment/add-predifined-appointment.component';\r\nimport { AddAppointmentTypeComponent } from './add-appointment-type/add-appointment-type.component';\r\nimport {AddNurseFormComponent} from \"./add-nurse-form/add-nurse-form.component\";\r\nimport {ViewClinicsComponent} from \"./view-clinics/view-clinics.component\";\r\nimport {MatIconModule} from \"@angular/material/icon\";\r\nimport {MatTableModule} from \"@angular/material/table\";\r\nimport {MatPaginatorModule} from \"@angular/material/paginator\";\r\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\r\nimport {MatDialogModule} from \"@angular/material/dialog\";\r\nimport {ViewPatientsNurseComponent} from \"./view-patients-nurse/view-patients-nurse.component\";\r\nimport {MatSortModule} from \"@angular/material/sort\";\r\nimport {EditClinicAdministratorComponent} from \"./edit-clinic-administrator/edit-clinic-administrator.component\";\r\nimport { ClinicsComponent } from './patient/clinics/clinics.component';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport { InterceptorService } from './services/interceptor.service';\r\nimport { PatientGuardService } from './guards/patient-guard.service';\r\nimport { LoginComponent } from './login/login.component';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { ClinicAdminGuardService } from './guards/clinic-admin-guard.service';\r\nimport { LoginGuardService } from './guards/login-guard.service';\r\nimport { ClinicCenterAdminGuardService } from './guards/clinic-center-admin-guard.service';\r\nimport { MedicallStuffGuardService } from './guards/medicall-stuff-guard.service';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {RequiredPassDirective} from \"./directive/RequiredPassDirective\";\r\nimport {EditClinicCenterAdministratorComponent} from \"./edit-clinic-center-administrator/edit-clinic-center-administrator.component\";\r\nimport {ViewClinicAdministratorComponent} from \"./view-clinic-administrator/view-clinic-administrator.component\";\r\nimport {ViewClinicCenterAdministratorComponent} from \"./view-clinic-center-administrator/view-clinic-center-administrator.component\";\r\nimport {ViewMedicalStaff} from \"./view-medical-staff/view-medical-staff.component\";\r\nimport {ViewPatientProfile} from \"./view-patient/view-patient.component\";\r\n\r\n\r\n\r\n\r\n\r\nconst appRoutes : Routes = [\r\n  {\r\n    path: 'clinicAdmin',\r\n    canActivate: [ClinicAdminGuardService],\r\n    children: [\r\n      {\r\n        path : 'addDoctor',\r\n        component : AddDoctorFormComponent\r\n      },\r\n      {\r\n        path : 'addPredefinedAppointment',\r\n        component : AddPredifinedAppointmentComponent\r\n      },\r\n      {\r\n        path : 'addAppointmentType',\r\n        component: AddAppointmentTypeComponent\r\n      },\r\n      {\r\n        path : 'addHall',\r\n        component : AddHallFormComponent\r\n      },\r\n      {\r\n        path: 'editProfile',\r\n        component : EditClinicAdministratorComponent\r\n      },\r\n      {\r\n        path: 'viewProfile',\r\n        component : ViewClinicAdministratorComponent\r\n      },\r\n      {\r\n        path : 'addNurse',\r\n        component : AddNurseFormComponent\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: 'clinicCenterAdmin',\r\n    canActivate: [ClinicCenterAdminGuardService],\r\n    children: [\r\n      {\r\n        path: 'addClinicCenterAdministrator',\r\n        component : AddClinicCenterAdminFromComponent\r\n      },\r\n      {\r\n        path: 'addClinic',\r\n        component : AddClinicFromComponent\r\n      },\r\n      {\r\n        path: 'addClinicAdministrator',\r\n        component : AddClinicAdminFromComponent\r\n      },\r\n      {\r\n        path: 'editProfile',\r\n        component : EditClinicCenterAdministratorComponent\r\n      },\r\n      {\r\n        path: 'viewProfile',\r\n        component : ViewClinicCenterAdministratorComponent\r\n      },\r\n      {\r\n        path : 'addMedicine',\r\n        component : AddMedicineFromComponent\r\n      },\r\n      {\r\n        path : 'addDiagnosis',\r\n        component : AddDiagnosisFormComponent\r\n      },\r\n      {\r\n        path : 'requestTable',\r\n        component : RequestListPatientsComponent\r\n      },\r\n    ]\r\n  },\r\n\r\n  {\r\n    path:'patient',\r\n    canActivate: [PatientGuardService],\r\n    children:[\r\n      {\r\n        path: 'editProfile',\r\n        component : EditPatientProfile\r\n      },\r\n      {\r\n        path: 'viewProfile',\r\n        component : ViewPatientProfile\r\n      },\r\n      {\r\n        path: 'clinics',\r\n        component: ClinicsComponent\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path : '',\r\n    component : LoginComponent,\r\n    pathMatch : 'full',\r\n    canActivate : [LoginGuardService]\r\n\r\n  },\r\n\r\n  {\r\n    path:'staff',\r\n    canActivate: [MedicallStuffGuardService],\r\n    children:[\r\n      {\r\n        path: 'editProfile',\r\n        component : EditMedicalStaff,\r\n        canActivate : [MedicallStuffGuardService]\r\n      },\r\n\r\n      {\r\n        path: 'viewProfile',\r\n        component : ViewMedicalStaff,\r\n        canActivate : [MedicallStuffGuardService]\r\n      },\r\n\r\n      {\r\n        path : 'viewPatients',\r\n        component : ViewPatientsNurseComponent,\r\n        canActivate : [MedicallStuffGuardService]\r\n      },\r\n\r\n\r\n    ]\r\n  },\r\n\r\n  {\r\n    path : '**',\r\n    component : NavigationComponent\r\n  }\r\n\r\n\r\n]\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavigationComponent,\r\n    AddDoctorFormComponent,\r\n    AddClinicCenterAdminFromComponent,\r\n    AddClinicFromComponent,\r\n    AddClinicAdminFromComponent,\r\n    AddMedicineFromComponent,\r\n    AddDiagnosisFormComponent,\r\n    RequestListPatientsComponent,\r\n    EditPatientProfile,\r\n    AddPredifinedAppointmentComponent,\r\n    AddHallFormComponent,\r\n    EditMedicalStaff,\r\n    AddAppointmentTypeComponent,\r\n    AddNurseFormComponent,\r\n    ViewClinicsComponent,\r\n    ViewPatientsNurseComponent,\r\n    DialogOverview,\r\n    EditClinicAdministratorComponent,\r\n    ClinicsComponent,\r\n    LoginComponent,\r\n    RequiredPassDirective,\r\n    EditClinicCenterAdministratorComponent,\r\n    ViewClinicAdministratorComponent,\r\n    ViewClinicCenterAdministratorComponent,\r\n    ViewMedicalStaff,\r\n    ViewPatientProfile\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    BrowserAnimationsModule,\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    NgxMaterialTimepickerModule,\r\n    MatSelectModule,\r\n    MatDividerModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    FormsModule,\r\n    MatSortModule,\r\n    MatExpansionModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatMenuModule\r\n\r\n  ],\r\n  providers: [MatDatepickerModule,\r\n    {\r\n      provide: HTTP_INTERCEPTORS, useClass:InterceptorService, multi:true\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import {Directive, Input} from \"@angular/core\";\r\nimport {AbstractControl, NG_VALIDATORS, Validator} from \"@angular/forms\";\r\n\r\n@Directive({\r\n  selector: '[requiredLen]',\r\n  providers: [\r\n    {provide: NG_VALIDATORS,useExisting:RequiredPassDirective, multi: true}\r\n  ]\r\n})\r\nexport class RequiredPassDirective implements Validator {\r\n  @Input(\"requiredLen\")\r\n  requiredLen: boolean;\r\n\r\n  validate(c:AbstractControl) {\r\n\r\n    let value = c.value;\r\n    if (value == null) value = '';\r\n    if ((value.length > 0 && value.length < 8)) {\r\n      return {\r\n        requiredLen: {condition:false}\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-clinic-administrator',\r\n  templateUrl: './edit-clinic-administrator.component.html',\r\n  styleUrls: ['./edit-clinic-administrator.component.css']\r\n})\r\nexport class EditClinicAdministratorComponent implements OnInit{\r\n\r\n  model: clinicAdminModel = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: '',\r\n    clinic: new class implements clinicModel {\r\n      address: '';\r\n      description: '';\r\n      name: '';\r\n    }\r\n  }\r\n  hide: boolean;\r\n  clinic_info : string;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n\r\n    this.http.get(\"http://localhost:8081/clinicAdministrator/getClinicAdministrator\")\r\n      .subscribe((res)=>{\r\n        this.model = <clinicAdminModel>res;\r\n        this.model.password = '';\r\n        this.clinic_info = this.model.clinic.name + \", \" + this.model.clinic.address;\r\n      });\r\n    this.hide = true;\r\n\r\n  }\r\n\r\n  editClinicAdmin(): void{\r\n    let url = \"http://localhost:8081/clinicAdministrator/editClinicAdministrator\"\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Your profile has been updated successfully!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while adding admin!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n    let booleanPromise = this.router.navigate([\"../viewProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n  checkPassword() {\r\n\r\n    return this.model.password.length == 0 || this.model.password.length >= 8;\r\n  }\r\n}\r\n\r\n\r\nexport interface clinicAdminModel\r\n{\r\n  name: string | RegExp;\r\n  surname: string | RegExp;\r\n  email: string | RegExp;\r\n  password: string;\r\n  clinic: clinicModel;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Edit profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && checkPassword() && editClinicAdmin()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern= \"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required [disabled]=\"true\">\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>New password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n            [type]=\"hide ? 'password' : 'text'\"\r\n             [requiredLen]=\"checkPassword()\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\" width: 250px;\">\r\n      <mat-label>Clinic</mat-label>\r\n      <input matInput  [(ngModel)] = \"clinic_info\" #clinic=\"ngModel\"  name=\"input_clinic\"\r\n             required [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Update profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-clinic-center-administrator',\r\n  templateUrl: './edit-clinic-center-administrator.component.html',\r\n  styleUrls: ['./edit-clinic-center-administrator.component.css']\r\n})\r\nexport class EditClinicCenterAdministratorComponent implements OnInit{\r\n\r\n  model: clinicCenterAdminModel = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: '',\r\n\r\n  }\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n\r\n    this.http.get(\"http://localhost:8081/clinicCenterAdministrator/getClinicCenterAdministrator\")\r\n      .subscribe((res)=>{\r\n        this.model = <clinicCenterAdminModel>res;\r\n        this.model.password = '';\r\n      });\r\n    this.hide = true;\r\n\r\n  }\r\n\r\n  editClinicCenterAdmin(): void{\r\n    let url = \"http://localhost:8081/clinicCenterAdministrator/editClinicCenterAdministrator\"\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Your profile has been updated successfully!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while adding admin!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n    let booleanPromise = this.router.navigate([\"../viewProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n  checkPassword() {\r\n\r\n    return this.model.password.length == 0 || this.model.password.length >= 8;\r\n  }\r\n}\r\n\r\n\r\nexport interface clinicCenterAdminModel\r\n{\r\n  name: string | RegExp;\r\n  surname: string | RegExp;\r\n  email: string | RegExp;\r\n  password: string;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Edit profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && checkPassword() && editClinicCenterAdmin()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern= \"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required [disabled]=\"true\">\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>New password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             [type]=\"hide ? 'password' : 'text'\"\r\n             [requiredLen]=\"checkPassword()\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Update profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, Directive, Input, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {patientModel} from \"../edit-patient/edit-patient.component\";\r\nimport {AbstractControl, FormControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n    selector: 'app-edit-medical-staff',\r\n    templateUrl: './edit-medical-staff.component.html',\r\n    styleUrls: ['./edit-medical-staff.component.css']\r\n})\r\nexport class EditMedicalStaff implements OnInit{\r\n\r\n    model: medicalStaffModel = {\r\n        email : '',\r\n        password : '',\r\n        name : '',\r\n        surname : '',\r\n        type: '',\r\n        workStart: '',\r\n        workEnd: '',\r\n    }\r\n  hide: boolean;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n                private router: Router, private r:ActivatedRoute){\r\n\r\n    }\r\n\r\n    ngOnInit(): void{\r\n      this.hide = true;\r\n      let url = \"http://localhost:8081/medicalStaff/getData\";\r\n      this.http.get(url).subscribe(\r\n        res => {\r\n          this.model = <medicalStaffModel>res;\r\n          this.model.password = '';\r\n        }\r\n      )\r\n    }\r\n\r\n    editMedicalStaff(): void{\r\n        let url = \"http://localhost:8081/medicalStaff/editMedicalStaff\"\r\n        this.http.post(url,this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Your profile has been updated successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n              this._snackBar.open(\"Error has occurred while updating your profile!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n                console.log(err)\r\n            }\r\n        );\r\n        let booleanPromise = this.router.navigate([\"../viewProfile\"], {relativeTo: this.r});\r\n    }\r\n  checkPassword() {\r\n\r\n    return this.model.password.length === 0 || this.model.password.length >= 8;\r\n  }\r\n}\r\n    export interface medicalStaffModel{\r\n        email : string |RegExp;\r\n        password : string;\r\n        name : string |RegExp;\r\n        surname : string |RegExp;\r\n        type : string;\r\n        workStart : string;\r\n        workEnd : string;\r\n\r\n    }\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Edit profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && checkPassword() && editMedicalStaff()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required [disabled]=\"true\"/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>New password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             [type]=\"hide ? 'password' : 'text'\"\r\n             [requiredLen]=\"checkPassword()\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Type</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.type\" name=\"input_type\"\r\n             #email=\"ngModel\" [disabled]=\"true\"/>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Update profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, Directive, Input, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {AbstractControl, FormControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-edit-patient',\r\n    templateUrl: './edit-patient.component.html',\r\n    styleUrls: ['./edit-patient.component.css']\r\n})\r\nexport class EditPatientProfile implements OnInit{\r\n\r\n    model: patientModel = {\r\n        email : '',\r\n        password : '',\r\n        name : '',\r\n        surname : '',\r\n        address : '',\r\n        city : '',\r\n        country : '',\r\n        phone_number : '',\r\n        insurance_number : ''\r\n    }\r\n  hide: boolean;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n                private router: Router, private r:ActivatedRoute){\r\n\r\n    }\r\n\r\n    ngOnInit(): void{\r\n        this.hide = true;\r\n        let url = \"http://localhost:8081/patients/getPatient\";\r\n        this.http.get(url).subscribe(\r\n          res => {\r\n            this.model = <patientModel>res;\r\n            this.model.password = '';\r\n          }\r\n        )\r\n    }\r\n\r\n    editPatient(): void{\r\n        let url = \"http://localhost:8081/patients/editPatient\"\r\n        this.http.post(url,this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Your profile has been updated successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n              this._snackBar.open(\"Error has occurred while updating your profile!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n              console.log(err)\r\n            }\r\n        );\r\n      let booleanPromise = this.router.navigate([\"../viewProfile\"], {relativeTo: this.r});\r\n    }\r\n  checkPassword() {\r\n\r\n    return this.model.password.length == 0 || this.model.password.length >= 8;\r\n  }\r\n}\r\n    export interface patientModel{\r\n        email : string |RegExp;\r\n        password : string;\r\n        name : string |RegExp;\r\n        surname : string |RegExp;\r\n        address : string |RegExp;\r\n        city : string |RegExp;\r\n        country : string |RegExp;\r\n        phone_number : string |RegExp;\r\n        insurance_number : string |RegExp;\r\n    }\r\n\r\n\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Edit profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && checkPassword() && editPatient()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern= \"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required [disabled]=\"true\">\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>New password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             [type]=\"hide ? 'password' : 'text'\"\r\n             [requiredLen]=\"checkPassword()\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Address</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.address\" #address=\"ngModel\"  name=\"input_address\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}[0-9]+\" required>\r\n      <mat-error *ngIf=\"address.invalid && address.errors?.pattern\">\r\n        Invalid address format! Example: Saint Patric 5\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>City</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.city\" #city=\"ngModel\" name=\"input_city\"\r\n             pattern=  \"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"city.invalid && city.errors?.pattern\">\r\n        Invalid city name! Example: New York\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Country</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.country\" #country=\"ngModel\"  name=\"input_country\"\r\n             pattern= \"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"country.invalid && country.errors?.pattern\">\r\n        Invalid country name! Example: New York\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Phone number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.phone_number\" #phone_number=\"ngModel\" name=\"input_phone_number\"\r\n             pattern= \"[0-9]{3,3}-[0-9]{3,3}-[0-9]{3,3}\" required>\r\n      <mat-error *ngIf=\"phone_number.invalid && phone_number.errors?.pattern\">\r\n        Invalid phone number! Example: 063-478-856\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Insurance number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.insurance_number\" #insurance_number=\"ngModel\" name=\"input_insurance_number\"\r\n             pattern= \"[A-Z0-9]+\" required [disabled]=\"true\">\r\n      <mat-error *ngIf=\"insurance_number.invalid && insurance_number.errors?.pattern\">\r\n        Invalid insurance number! Example: ABC123\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Update profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClinicAdminGuardService {\n\n  constructor(private router: Router,private authservice: AuthenticationService) { }\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    //ovde ide check da li je trenutni korisnik pacijent\n    if(sessionStorage.getItem('role')===(\"ROLE_CLINIC_ADMIN\")){\n      return true;\n    }\n    else{\n      this.router.navigate(['']);\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClinicCenterAdminGuardService {\n\n  constructor(private router: Router,private authservice: AuthenticationService) { }\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    \n    if(sessionStorage.getItem('role')===(\"ROLE_CLINIC_CENTER_ADMIN\")){\n      return true;\n    }\n    else{\n      this.router.navigate(['']);\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class LoginGuardService {\n\n  constructor(private router: Router,private authservice: AuthenticationService) { }\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    //ovde ide check da li je trenutni korisnik pacijent\n    if(this.authservice.isUserLoggedIn()){\n\n      if (sessionStorage.getItem('role') === \"ROLE_CLINIC_ADMIN\"){\n        this.router.navigate(['/AddDoctorFormComponent']);\n      }\n      else if (sessionStorage.getItem('role') === \"ROLE_CLINIC_CENTER_ADMIN\"){\n        \n        this.router.navigate(['/addClinicCenterAdministrator']);\n      }\n      else if (sessionStorage.getItem('role') === \"ROLE_DOCTOR\"){\n        this.router.navigate(['/viewPatients']);\n      }\n      else if (sessionStorage.getItem('role') === \"ROLE_NURSE\"){\n        this.router.navigate(['/viewPatients']);\n      }\n      else if (sessionStorage.getItem('role') === \"ROLE_PATIENT\"){\n        this.router.navigate(['/patient/clinics']);\n      }\n      return false;\n    }\n    else{\n\n      return true;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MedicallStuffGuardService {\n\n  constructor(private router: Router,private authservice: AuthenticationService) { }\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    //ovde ide check da li je trenutni korisnik pacijent\n    if(sessionStorage.getItem('role')===(\"ROLE_NURSE\") || sessionStorage.getItem('role')===(\"ROLE_DOCTOR\")){\n      return true;\n    }\n    else{\n      this.router.navigate(['']);\n      return false;\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\nimport { AuthenticationService } from '../services/authentication.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PatientGuardService implements CanActivate {\n\n  constructor(private router: Router,private authservice: AuthenticationService) { }\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\n    //ovde ide check da li je trenutni korisnik pacijent\n    if(sessionStorage.getItem('role')===(\"ROLE_PATIENT\")){\n      return true;\n    }\n    else{\n      this.router.navigate(['']);\n      return false;\n    }\n  }\n}\n\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {FormBuilder, FormGroup} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n\r\n\r\n  username : String = '';\r\n  password : String = '';\r\n  password2 :String = '';\r\n\r\n  myModel : model = {\r\n    email : \"\",\r\n    password : \"\"\r\n  }\r\n\r\n  status : boolean = false;\r\n\r\n  model: patientModel = {\r\n    email : '',\r\n    password : '',\r\n    name : '',\r\n    surname : '',\r\n    address : '',\r\n    city : '',\r\n    country : '',\r\n    phone_number : '',\r\n    insurance_number : ''\r\n  }\r\n\r\n  hide : boolean = true;\r\n  hide1: boolean = true;\r\n  hide2: boolean = true;\r\n\r\n  response : any;\r\n\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http : HttpClient, private authservice : AuthenticationService) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.status = false;\r\n  }\r\n\r\n  loginAuth(){\r\n    console.log(this.status);\r\n    this.authservice.authenticate(this.myModel).then( num => {\r\n      this.status = (num === 401);\r\n      document.getElementById('validation').style.display = 'block'}\r\n    );\r\n    /*console.log(newStatus);\r\n    this.status = newStatus;*/\r\n\r\n  }\r\n\r\n  registerPatient(): void{\r\n    let url = \"http://localhost:8081/registrationRequests/register\"\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Your registration request has been sent! Your activation link will be sent to you soon.\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          console.log(err.error)\r\n          if(err.error === 'email'){\r\n            this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n              duration: 2000,\r\n            });\r\n          }else{\r\n            this._snackBar.open(\"Insurance number already taken!\", \"Close\", {\r\n              duration: 2000,\r\n            });\r\n          }\r\n\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while registering your profile!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  checkPassword():boolean\r\n  {\r\n    let pass1 = this.model.password;\r\n    let pass2 = this.password2;\r\n    if(pass1 === pass2)\r\n    {\r\n\r\n      return true;\r\n    }\r\n    else\r\n    {\r\n      this._snackBar.open(\"Passwords do not match!\", \"Close\", {\r\n        duration: 2000,\r\n      });\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport interface model{\r\n  email: String;\r\n  password : String;\r\n}\r\n\r\nexport interface patientModel{\r\n  email : string |RegExp;\r\n  password : string;\r\n  name : string |RegExp;\r\n  surname : string |RegExp;\r\n  address : string |RegExp;\r\n  city : string |RegExp;\r\n  country : string |RegExp;\r\n  phone_number : string |RegExp;\r\n  insurance_number : string |RegExp;\r\n}\r\n","\r\n<div style=\"display:inline;\">\r\n    <mat-tab-group style=\"margin-left: auto; margin-right : auto;width: 50%;padding-top: 2%\" appearance=\"outline\">\r\n        <mat-tab label=\"Login\">\r\n        <div>\r\n            <form  #f=\"ngForm\" (submit)=\"loginAuth()\" style=\"display: inline-block;margin-right: auto;margin-left: auto; padding-top: 5%; padding-bottom: 5% ;width: 37%\">\r\n\r\n                <mat-error id=\"validation\" style=\"display: none;padding-left:86%; width: 180%\">\r\n                  Email or password are incorrect.\r\n                </mat-error>\r\n\r\n                <br>\r\n\r\n                <mat-form-field appearance=\"outline\" style=\"padding-left:80%; width: 180%\">\r\n                    <mat-label>Email</mat-label>\r\n                    <input matInput  [(ngModel)] = \"myModel.email\" name=\"input_email\"\r\n                    #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n                    required/>\r\n                    <mat-error *ngIf=\" email.invalid\">\r\n                        Example: example_1@mail.com\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\" style=\"padding-left:80%; width: 180%\">\r\n                    <mat-label>Password</mat-label>\r\n                    <input matInput  [(ngModel)] = \"myModel.password\" #password=\"ngModel\" name=\"input_password\"\r\n                            required minlength=\"8\"\r\n                            [type]=\"hide ? 'password' : 'text'\">\r\n\r\n                    <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                    <mat-error *ngIf=\"password.invalid\">\r\n                        Password field must be at least 8 characters long!\r\n                    </mat-error>\r\n\r\n                </mat-form-field>\r\n                <div style=\"text-align: center;\">\r\n                    <button mat-raised-button style=\"margin-left: 110%; width: 100px;\" >Login</button>\r\n\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n        </mat-tab>\r\n        <mat-tab label=\"Registration\">\r\n          <div >\r\n            <form  #f1=\"ngForm\" (submit)=\"f1.form.valid && checkPassword() && registerPatient()\" style=\"padding-left: 23%;padding-bottom: 2%;padding-top: 3%;\">\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n                <mat-label>Name</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n                       pattern=\"[A-Z][a-z]*\" required/>\r\n                <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n                  Invalid name format! Example: Mike\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n                <mat-label>Surname</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n                       pattern= \"[A-Z][a-z]*\" required/>\r\n                <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n                  Invalid surname format! Example: Portman\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <br>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n                <mat-label>Password</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n                       required minlength=\"8\"  [type]=\"hide1 ? 'password' : 'text'\"/>\r\n                <mat-icon matSuffix (click)=\"hide1 = !hide1\">{{hide1 ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                <mat-error *ngIf=\"password.invalid\">\r\n                  Password field must be at least 8 characters long!\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n                <mat-label>Confirm password</mat-label>\r\n                <input matInput  [(ngModel)] = \"password2\" #password=\"ngModel\" name=\"input_password2\"\r\n                       required minlength=\"8\"  [type]=\"hide2 ? 'password' : 'text'\"/>\r\n                <mat-icon matSuffix (click)=\"hide2 = !hide2\">{{hide2 ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                <mat-error *ngIf=\"password.invalid\">\r\n                  Password field must be at least 8 characters long!\r\n                  </mat-error>\r\n              </mat-form-field>\r\n\r\n              <br>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n                <mat-label>Email</mat-label>\r\n                <input matInput\r\n                       [(ngModel)] = \"model.email\" name=\"input_email\"\r\n                       #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n                       required/>\r\n                <mat-error *ngIf=\" email.invalid\">\r\n                  Invalid email format! Example: example_1@mail.com\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n                <mat-label>Address</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.address\" #address=\"ngModel\"  name=\"input_address\"\r\n                       pattern=\"([A-Z][a-z]+[ ]*){1,}[0-9]+\" required/>\r\n                <mat-error *ngIf=\"address.invalid && address.errors?.pattern\">\r\n                  Invalid address format! Example: Saint Patric 5\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <br>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\" width: 250px;\">\r\n                <mat-label>City</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.city\" #city=\"ngModel\" name=\"input_city\"\r\n                       pattern=  \"^([A-Z][a-z]+[ ]*){1,}\" required/>\r\n                <mat-error *ngIf=\"city.invalid && city.errors?.pattern\">\r\n                  Invalid city name! Example: New York\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\" padding-left: 25px;width: 250px;\">\r\n                <mat-label>Country</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.country\" #country=\"ngModel\"  name=\"input_country\"\r\n                       pattern= \"([A-Z][a-z]+[ ]*){1,}\" required/>\r\n                <mat-error *ngIf=\"country.invalid && country.errors?.pattern\">\r\n                  Invalid country name! Example: New York\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <br>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n                <mat-label>Phone number</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.phone_number\" #phone_number=\"ngModel\" name=\"input_phone_number\"\r\n                       pattern= \"[0-9]{3,3}-[0-9]{3,3}-[0-9]{3,3}\" required/>\r\n                <mat-error *ngIf=\"phone_number.invalid && phone_number.errors?.pattern\">\r\n                  Invalid phone number! Example: 063-478-856\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n                <mat-label>Insurance number</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.insurance_number\" #insurance_number=\"ngModel\" name=\"input_insurance_number\"\r\n                       pattern= \"[A-Z0-9]+\" required/>\r\n                <mat-error *ngIf=\"insurance_number.invalid && insurance_number.errors?.pattern\">\r\n                  Invalid insurance number! Example: ABC123\r\n                </mat-error>\r\n              </mat-form-field>\r\n              <br>\r\n              <br>\r\n              <div style=\"text-align: center;\">\r\n                <button mat-raised-button style=\"margin-right: 31%; width: 100px;\" >Register</button>\r\n\r\n            </div>\r\n\r\n              <br>\r\n            </form>\r\n          </div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.css']\r\n})\r\nexport class NavigationComponent implements OnInit {\r\n\r\n  currentRole : String = null;\r\n  editProfile : String = null;\r\n\r\n  constructor(private authservice : AuthenticationService) {\r\n\r\n   }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  checkPatient(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_PATIENT\"){\r\n      this.editProfile = \"patient/viewProfile\";\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkDoctor(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_DOCTOR\"){\r\n      this.editProfile = \"staff/viewProfile\";\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkCAdmin(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_CLINIC_ADMIN\"){\r\n      this.editProfile = \"clinicAdmin/viewProfile\"\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkCCAdmin(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_CLINIC_CENTER_ADMIN\"){\r\n      this.editProfile = \"clinicCenterAdmin/viewProfile\"\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkNurse(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_NURSE\"){\r\n      this.editProfile = \"staff/viewProfile\";\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkLogged(){\r\n    if(sessionStorage.getItem('role') != null){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  logout(){\r\n    this.authservice.logOut();\r\n  }\r\n\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n\r\n  <span class=\"material-icons\" style=\"margin-left: 3%;\">local_hospital</span>\r\n\r\n  <span>eClinic</span>\r\n\r\n\r\n  <!--Patient-->\r\n  <a *ngIf=\"checkPatient()\" routerLink=\"/patient/clinics\" style=\"margin-left: 5%;\" ><button mat-flat-button color=\"primary\" >Clinics</button></a>\r\n\r\n  <!--Clinic Admin-->\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addDoctor\" style=\"margin-left: 5%;\" ><button mat-flat-button color=\"primary\" >Doctors</button></a>\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addPredefinedAppointment\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Appointments</button></a>\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addAppointmentType\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Appointment types</button></a>\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addHall\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Halls</button></a>\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addNurse\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Nurses</button></a>\r\n\r\n  <!--ClinicCenterAdmin-->\r\n  <button *ngIf=\"checkCCAdmin()\" button mat-flat-button color=\"primary\" style=\"margin-left: 3%;\" [matMenuTriggerFor]=\"menu\">Administrators</button>\r\n  <mat-menu #menu=\"matMenu\">\r\n    <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addClinicAdministrator\" style=\"margin-left: 3%;\" ><button mat-flat-button >Clinic Adminstrator</button></a>\r\n    <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addClinicCenterAdministrator\" style=\"margin-left: 3%;\" ><button mat-flat-button  >Clinic Center Adminstrator</button></a>\r\n  </mat-menu>\r\n\r\n  <button *ngIf=\"checkCCAdmin()\" button mat-flat-button color=\"primary\" style=\"margin-left: 3%;\" [matMenuTriggerFor]=\"menu1\">Clinics</button>\r\n  <mat-menu #menu1=\"matMenu\">\r\n    <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addClinic\" style=\"margin-left: 3%;\" ><button mat-flat-button >Add clinic</button></a>\r\n    <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/viewClinics\" style=\"margin-left: 3%;\" ><button mat-flat-button  >View clinics</button></a>\r\n  </mat-menu>\r\n\r\n  <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addMedicine\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Medicine</button></a>\r\n  <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addDiagnosis\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Diagnosis</button></a>\r\n  <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/requestTable\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Requests</button></a>\r\n\r\n  <!--Doctor-->\r\n  <a *ngIf=\"checkDoctor()\" routerLink=\"staff/viewPatients\" style=\"margin-left: 5%;\" ><button mat-flat-button color=\"primary\" >Patients</button></a>\r\n  <!--Nurse-->\r\n  <a *ngIf=\"checkNurse()\" routerLink=\"staff/viewPatients\" style=\"margin-left: 5%;\" ><button mat-flat-button color=\"primary\" >Patients</button></a>\r\n\r\n\r\n  <!--Kod svakog proverava koji je user jer svako ima da edituje svoj profil-->\r\n  <span class=\"example-spacer\"> </span>\r\n  <a *ngIf=\"checkLogged()\" href=\"#\" style=\"margin-left: 2%;\" ><mat-icon (click)=\"logout()\" [ngStyle]=\"{'color':'white'}\">exit_to_app</mat-icon></a>\r\n  <a *ngIf=\"checkLogged()\" routerLink=\"{{this.editProfile}}\" style=\"margin-left: 1%;\" ><mat-icon [ngStyle]=\"{'color':'white'}\">face</mat-icon></a>\r\n\r\n</mat-toolbar>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatTableDataSource } from '@angular/material/table';\nimport { MatPaginator } from '@angular/material/paginator';\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { MatDialog } from '@angular/material/dialog';\n\n@Component({\n  selector: 'app-clinics',\n  templateUrl: './clinics.component.html',\n  styleUrls: ['./clinics.component.css']\n})\nexport class ClinicsComponent implements OnInit {\n\n  displayedColumns: string[] = ['name', 'address', 'avg_rating', 'price'];\n\n  dataSource = new MatTableDataSource();\n\n  selectedRowIndex: number = 0;\n\n  appointmentType_id : number = 0;\n\n  appointmentTypes : any=[];\n\n  model : ClinicModel = {\n    name : '',\n    address : '',\n    avg_rating : 0,\n    price : 0\n  }\n\n  searchModel : SearchClinicModel = {\n    date : '',\n    appointmentType_id : 0,\n    address : '',\n    avg_rate_lowest : 0,\n    avg_rate_highest : 0\n  }\n\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) { }\n\n  ngOnInit(): void {\n    let params = new HttpParams();\n    params = params.append('date', \"0\")\n    params = params.append('appointmentType_id', this.searchModel.appointmentType_id.toString());\n    params = params.append('address', \"0\");\n    params = params.append('avg_rate_lowest', \"0\");\n    params = params.append('avg_rate_highest', \"0\");\n    \n    this.http.get(\"http://localhost:8081/patients/getClinics\",{params:params})\n    .subscribe((res) => {\n      // @ts-ignore\n      this.dataSource.data = res;\n\n    });\n    \n    \n    this.dataSource.paginator = this.paginator;\n    this.selectedRowIndex  = 1;\n\n    this.http.get(\"http://localhost:8081/appointmentType/getAppointmentTypes\").subscribe(\n      (res) =>{\n        this.appointmentTypes = res;\n      }\n    );\n\n  }\n}\n\nexport interface ClinicModel{\n   name: String,\n   address : String,\n   avg_rating : number,\n   price : number\n}\n\nexport interface SearchClinicModel{\n  date : String,\n  appointmentType_id : number,\n  address : String,\n  avg_rate_lowest : number,\n  avg_rate_highest : number\n}","<br>\n<h1 style=\"margin-left: 30px;\">Make appointment: </h1>\n<mat-divider></mat-divider>\n<br>\n\n<div>\n    <form  #f=\"ngForm\"  style=\"padding-left: 25px;\">\n    <div>\n        <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\n            <mat-label>Choose a date</mat-label>\n            <input matInput [matDatepicker]=\"picker\" readonly required>\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\n            <mat-datepicker #picker ></mat-datepicker>\n        </mat-form-field>\n\n        <mat-form-field appearance=\"outline\" style=\"width: 280px;padding-left: 20px; padding-right: 20px;\">\n            <mat-label>Appointment type</mat-label>\n            <mat-select [(ngModel)] = \"searchModel.appointmentType_id\" name=\"appointment_type_id\"\n                #appointmentType_id=\"ngModel\" required >\n                <mat-option *ngFor=\"let a of appointmentTypes\" [value]=\"a.id\" >{{a.name}}</mat-option>\n            </mat-select>\n        </mat-form-field>\n\n        <button mat-raised-button style=\"width: 120px\" >Search...</button>\n\n    </div>\n    \n\n    <div class=\"mat-elevation-z8\" style=\"width: 800px;float:left;\">\n\n        <table mat-table [dataSource]=\"dataSource\" >\n\n            <ng-container matColumnDef=\"name\">\n              <th mat-header-cell *matHeaderCellDef> Name </th>\n              <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"address\">\n                <th mat-header-cell *matHeaderCellDef> Address </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\n              </ng-container>\n\n            <ng-container matColumnDef=\"avg_rating\">\n                <th mat-header-cell *matHeaderCellDef> Average rate </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.avg_rating}} </td>\n            </ng-container>\n\n            <ng-container matColumnDef=\"price\">\n                <th mat-header-cell *matHeaderCellDef> Price </th>\n                <td mat-cell *matCellDef=\"let element\"> {{element.price}} </td>\n            </ng-container>\n        \n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\" style=\"background: transparent !important;\"></tr>\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" ></tr>\n\n        </table>\n\n        <mat-paginator [pageSizeOptions]=\"[5]\" showFirstLastButtons></mat-paginator>\n\n    </div>\n    \n    <div style=\"float: left;display: block;width: 40%;padding-left: 5% ;\">\n        <mat-expansion-panel  >\n            <mat-expansion-panel-header>\n            <mat-panel-title>\n                More options\n            </mat-panel-title>\n            <mat-panel-description>\n                Type clinic address and average rate\n            </mat-panel-description>\n            </mat-expansion-panel-header>\n        \n            <mat-form-field style=\"width: 40%;\">\n            <mat-label>Clinic Address</mat-label>\n            <input matInput>\n            </mat-form-field>\n        \n            <div style=\"display: block;\">\n                <mat-form-field style=\"width: 40%;\">\n                    <mat-label>Lowest rate</mat-label>\n                    <input matInput type=\"number\" min=\"1\">\n                </mat-form-field>\n\n                <mat-form-field style=\"padding-left: 20px ;width: 40%;\">\n                    <mat-label>Highest rate</mat-label>\n                    <input matInput type=\"number\" min=\"1\">\n                </mat-form-field>\n            </div>\n        </mat-expansion-panel>\n    </div>\n\n    </form>\n</div>\n","import {Component, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatTableDataSource} from \"@angular/material/table\";\r\nimport {MatPaginator} from \"@angular/material/paginator\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from \"@angular/material/dialog\";\r\n\r\n\r\n@Component({\r\n  selector: 'request-list-patients',\r\n  templateUrl: './request-list-patients.component.html',\r\n  styleUrls: ['./request-list-patients.component.css']\r\n})\r\nexport class RequestListPatientsComponent implements OnInit {\r\n  displayedColumns: string[] = ['email', 'name', 'surname', 'address',\r\n    'city', 'country', 'phone_number', 'insurance_number', 'accept', 'decline'];\r\n\r\n  dataSource = new MatTableDataSource();\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  text: string;\r\n  sent: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              public dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.http.get(\"http://localhost:8081/registrationRequests/getRequests\")\r\n      .subscribe((res) => {\r\n        // @ts-ignore\r\n        this.dataSource.data = res;\r\n\r\n      });\r\n\r\n    this.dataSource.paginator = this.paginator;\r\n\r\n  }\r\n\r\n  Accept(req): void {\r\n\r\n    let url = \"http://localhost:8081/patients/addPatient\"\r\n    this.http.post(url, req).subscribe(\r\n      res => {\r\n        let index = this.dataSource.data.indexOf(req);\r\n        this.dataSource.data.splice(index, 1);\r\n        this.dataSource._updateChangeSubscription()\r\n        this._snackBar.open(\"Patient registered\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if (err.status == 409) {\r\n          this._snackBar.open(\"Patient already exists with\" + req.email + \"email\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n        } else {\r\n          this._snackBar.open(\"Error has occurred while registering patient\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  Decline(req): void {\r\n    const dialogRef = this.dialog.open(DialogOverview, {\r\n      width: '25%',height: '40%',\r\n      data: {text: this.text, sent:this.sent}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      req.text = result.text;\r\n      if(req.text == null)\r\n      {\r\n        this._snackBar.open(\"Message not sent! Sent body can't be empty!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n      }\r\n\r\n      if(result.sent === true && req.text != null)\r\n      {\r\n        let url = \"http://localhost:8081/registrationRequests/declineRequest\"\r\n        this.http.post(url, req).subscribe(\r\n          res => {\r\n            let index = this.dataSource.data.indexOf(req);\r\n            this.dataSource.data.splice(index, 1);\r\n            this.dataSource._updateChangeSubscription()\r\n            this._snackBar.open(\"Request declined!\", \"Close\", {\r\n              duration: 2000,\r\n            });\r\n\r\n          },\r\n          err => {\r\n            if (err.status == 409) {\r\n              this._snackBar.open(\"Patient already exists with\" + req.email + \"email!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n            } else {\r\n              this._snackBar.open(\"Error has occurred while declining registering patient!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n              console.log(err);\r\n            }\r\n          }\r\n        );\r\n      }\r\n\r\n\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport interface DialogData {\r\n  text: string;\r\n  sent: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'request-list-patients',\r\n  templateUrl: './dialog-overview.html',\r\n  styleUrls: ['./request-list-patients.component.css']\r\n})\r\nexport class DialogOverview {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogOverview>,\r\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {}\r\n\r\n  onClick(): boolean {\r\n\r\n    return false;\r\n  }\r\n\r\n  Send(): boolean{\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Table of requests </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"dataSource\">\r\n\r\n    <ng-container matColumnDef=\"email\">\r\n      <th mat-header-cell *matHeaderCellDef> Email </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef> Name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <th mat-header-cell *matHeaderCellDef> Surname </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.surname}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"address\">\r\n      <th mat-header-cell *matHeaderCellDef> Address </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"city\">\r\n      <th mat-header-cell *matHeaderCellDef> City </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.city}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"country\">\r\n      <th mat-header-cell *matHeaderCellDef> Country </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.country}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"phone_number\">\r\n      <th mat-header-cell *matHeaderCellDef> Phone number </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.phone_number}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"insurance_number\">\r\n      <th mat-header-cell *matHeaderCellDef> Insurance number </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.insurance_number}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"accept\">\r\n      <th mat-header-cell *matHeaderCellDef>  </th>\r\n      <td mat-cell *matCellDef=\"let element\">  <button mat-button (click)=\"Accept(element)\" >Accept</button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"decline\">\r\n      <th mat-header-cell *matHeaderCellDef>  </th>\r\n      <td mat-cell *matCellDef=\"let element\">  <button mat-button (click)=\"Decline(element)\" >Decline</button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n","<h2 mat-dialog-title style=\"text-align: center\">Send declinance mail</h2>\r\n<div mat-dialog-content>\r\n  <mat-form-field>\r\n    <textarea matInput rows=\"5\" [(ngModel)]=\"data.text\"> </textarea>\r\n  </mat-form-field>\r\n</div>\r\n<div mat-dialog-actions>\r\n\r\n  <mat-dialog-actions>\r\n    <button mat-button [mat-dialog-close]=\"data\" (click)=\"data.sent = onClick()\">Cancel</button>\r\n    <button mat-button [mat-dialog-close]=\"data\" (click)=\"data.sent = Send()\">Send</button>\r\n  </mat-dialog-actions>\r\n\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport * as jwt_decode from 'jwt-decode';\r\nimport { Router } from '@angular/router';\r\n\r\nexport class User{\r\n  constructor(\r\n    public token:string,\r\n     ) {}\r\n\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  constructor(\r\n    private httpClient:HttpClient,private router: Router\r\n  ) { }\r\n\r\n  authenticate(model):Promise<number> {\r\n    let status = 0;\r\n    let promise  =  new Promise<number>((resolve,reject) => {\r\n      this.httpClient.post('http://localhost:8081/auth/login',model).toPromise().then(\r\n        res => {\r\n          let tokenStr= 'Bearer ' + res['accessToken'];\r\n          sessionStorage.setItem('token', tokenStr);\r\n          let decoded = jwt_decode(res['accessToken']);\r\n          sessionStorage.setItem('user_id', decoded['id']);\r\n          sessionStorage.setItem('role', decoded['role']);\r\n          console.log(decoded['role']);\r\n          console.log(\"USAO\");\r\n          console.log(sessionStorage.getItem('role'));\r\n          if (sessionStorage.getItem('role') === \"ROLE_CLINIC_ADMIN\"){\r\n            this.router.navigate(['/clinicAdmin/addDoctor']);\r\n          }\r\n          else if (sessionStorage.getItem('role') === \"ROLE_CLINIC_CENTER_ADMIN\"){\r\n            this.router.navigate(['/clinicCenterAdmin/addClinicCenterAdministrator']);\r\n          }\r\n          else if (sessionStorage.getItem('role') === \"ROLE_DOCTOR\"){\r\n            this.router.navigate(['staff/viewPatients']);\r\n          }\r\n          else if (sessionStorage.getItem('role') === \"ROLE_NURSE\"){\r\n            this.router.navigate(['staff/viewPatients']);\r\n          }\r\n          else if (sessionStorage.getItem('role') === \"ROLE_PATIENT\"){\r\n            this.router.navigate(['/patient/clinics']);\r\n          }\r\n          status = 200;\r\n          console.log(200);\r\n          resolve(200);\r\n        },\r\n        err => {\r\n          if (err.status === 401) {\r\n            console.log(401);\r\n\r\n            status = 401;\r\n            resolve(401);\r\n          }\r\n        }\r\n      )\r\n    });\r\n\r\n    return promise;\r\n\r\n    /*this.httpClient.post('http://localhost:8081/auth/login',model).subscribe(\r\n       res => {\r\n        let tokenStr= 'Bearer ' + res['accessToken'];\r\n        sessionStorage.setItem('token', tokenStr);\r\n        let decoded = jwt_decode(res['accessToken']);\r\n        sessionStorage.setItem('user_id', decoded['id']);\r\n        sessionStorage.setItem('role', decoded['role']);\r\n        if (sessionStorage.getItem('role') === \"ROLE_CLINIC_ADMIN\"){\r\n          this.router.navigate(['/clinicAdmin/addDoctor']);\r\n        }\r\n        else if (sessionStorage.getItem('role') === \"ROLE_CLINIC_CENTER_ADMIN\"){\r\n          this.router.navigate(['/clinicCenterAdmin/addClinicCenterAdministrator']);\r\n        }\r\n        else if (sessionStorage.getItem('role') === \"ROLE_DOCTOR\"){\r\n          this.router.navigate(['/viewPatients']);\r\n        }\r\n        else if (sessionStorage.getItem('role') === \"ROLE_NURSE\"){\r\n          this.router.navigate(['/viewPatients']);\r\n        }\r\n        else if (sessionStorage.getItem('role') === \"ROLE_PATIENT\"){\r\n          this.router.navigate(['/patient/clinics']);\r\n        }\r\n        status = 200;\r\n        return new Promise<>\r\n      },\r\n      err => {\r\n        console.log(err.status);\r\n        if (err.status === 401) {\r\n          status = 401;\r\n          console.log(\"Vracam status\" + status)\r\n          return status;\r\n        }\r\n      }\r\n     );*/\r\n  }\r\n\r\n\r\nisUserLoggedIn() {\r\n  let token = sessionStorage.getItem('token');\r\n  return !(token === null)\r\n}\r\n\r\nlogOut() {\r\n  sessionStorage.removeItem('token');\r\n  sessionStorage.removeItem('role');\r\n  sessionStorage.removeItem('id');\r\n  this.router.navigate(['']);\r\n}\r\n\r\ngetCurrentUserId(){\r\n    return sessionStorage.getItem('id');\r\n\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class InterceptorService implements HttpInterceptor {\n\n  constructor() { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n\n    if (sessionStorage.getItem('token')) {\n      req = req.clone({\n        setHeaders: {\n          Authorization: sessionStorage.getItem('token')\n        }\n      })\n    }\n    return next.handle(req);\n\n  }\n}\n","import {Component, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-view-clinic-administrator',\r\n  templateUrl: './view-clinic-administrator.component.html',\r\n  styleUrls: ['./view-clinic-administrator.component.css']\r\n})\r\nexport class ViewClinicAdministratorComponent implements OnInit{\r\n\r\n  model: clinicAdminModel = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: '',\r\n    clinic: new class implements clinicModel {\r\n      address: '';\r\n      description: '';\r\n      name: '';\r\n    }\r\n  }\r\n  hide: boolean;\r\n  clinic_info : string;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n\r\n    this.http.get(\"http://localhost:8081/clinicAdministrator/getClinicAdministrator\")\r\n      .subscribe((res)=>{\r\n        this.model = <clinicAdminModel>res;\r\n        this.clinic_info = this.model.clinic.name + \", \" + this.model.clinic.address;\r\n      });\r\n    this.hide = true;\r\n\r\n  }\r\n\r\n  goToEdit(): void {\r\n    let booleanPromise = this.router.navigate([\"../editProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport interface clinicAdminModel\r\n{\r\n  name: string | RegExp;\r\n  surname: string | RegExp;\r\n  email: string | RegExp;\r\n  password: string;\r\n  clinic: clinicModel;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">View profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"goToEdit()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Clinic</mat-label>\r\n      <input matInput  [(ngModel)] = \"clinic_info\" #clinic=\"ngModel\"  name=\"input_clinic\" [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Edit profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-view-clinic-center-administrator',\r\n  templateUrl: './view-clinic-center-administrator.component.html',\r\n  styleUrls: ['./view-clinic-center-administrator.component.css']\r\n})\r\nexport class ViewClinicCenterAdministratorComponent implements OnInit{\r\n\r\n  model: clinicCenterAdminModel = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: '',\r\n\r\n  }\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n\r\n    this.http.get(\"http://localhost:8081/clinicCenterAdministrator/getClinicCenterAdministrator\")\r\n      .subscribe((res)=>{\r\n        this.model = <clinicCenterAdminModel>res;\r\n      });\r\n    this.hide = true;\r\n\r\n  }\r\n\r\n  goToEdit(): void {\r\n    let booleanPromise = this.router.navigate([\"../editProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport interface clinicCenterAdminModel\r\n{\r\n  name: string | RegExp;\r\n  surname: string | RegExp;\r\n  email: string | RegExp;\r\n  password: string;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">View profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"goToEdit()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Edit profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatTableDataSource} from \"@angular/material/table\";\r\nimport {MatPaginator} from \"@angular/material/paginator\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from \"@angular/material/dialog\";\r\n\r\n\r\n@Component({\r\n  selector: 'view-clinics',\r\n  templateUrl: './view-clinics.component.html',\r\n  styleUrls: ['./view-clinics.component.css']\r\n})\r\nexport class ViewClinicsComponent implements OnInit {\r\n  displayedColumns: string[] = ['name', 'address', 'description'];\r\n\r\n  dataSource = new MatTableDataSource();\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              public dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.http.get(\"http://localhost:8081/clinic/getClinics\")\r\n      .subscribe((res) => {\r\n        // @ts-ignore\r\n        this.dataSource.data = res;\r\n\r\n      });\r\n\r\n    this.dataSource.paginator = this.paginator;\r\n\r\n  }\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Table of clinics </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"dataSource\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef> Clinic name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"address\">\r\n      <th mat-header-cell *matHeaderCellDef> Clinic address </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"description\">\r\n      <th mat-header-cell *matHeaderCellDef> Clinic description </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n","import {Component, Directive, Input, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {patientModel} from \"../edit-patient/edit-patient.component\";\r\nimport {AbstractControl, FormControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-view-medical-staff',\r\n  templateUrl: './view-medical-staff.component.html',\r\n  styleUrls: ['./view-medical-staff.component.css']\r\n})\r\nexport class ViewMedicalStaff implements OnInit{\r\n\r\n  model: medicalStaffModel = {\r\n    email : '',\r\n    password : '',\r\n    name : '',\r\n    surname : '',\r\n    type: '',\r\n    workStart: '',\r\n    workEnd: '',\r\n  }\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n    this.hide = true;\r\n    let url = \"http://localhost:8081/medicalStaff/getData\";\r\n    this.http.get(url).subscribe(\r\n      res => {\r\n        this.model = <medicalStaffModel>res;\r\n        this.model.password = '';\r\n      }\r\n    )\r\n  }\r\n\r\n  goToEdit(): void {\r\n    let booleanPromise = this.router.navigate([\"../editProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n}\r\nexport interface medicalStaffModel{\r\n  email : string |RegExp;\r\n  password : string;\r\n  name : string |RegExp;\r\n  surname : string |RegExp;\r\n  type : string;\r\n  workStart : string;\r\n  workEnd : string;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">View profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"goToEdit()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" [disabled]=\"true\"/>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Type</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.type\" name=\"input_type\"\r\n             #email=\"ngModel\" [disabled]=\"true\"/>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Edit profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, Directive, Input, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {AbstractControl, FormControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-view-patient',\r\n  templateUrl: './view-patient.component.html',\r\n  styleUrls: ['./view-patient.component.css']\r\n})\r\nexport class ViewPatientProfile implements OnInit{\r\n\r\n  model: patientModel = {\r\n    email : '',\r\n    password : '',\r\n    name : '',\r\n    surname : '',\r\n    address : '',\r\n    city : '',\r\n    country : '',\r\n    phone_number : '',\r\n    insurance_number : ''\r\n  }\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n    this.hide = true;\r\n    let url = \"http://localhost:8081/patients/getPatient\";\r\n    this.http.get(url).subscribe(\r\n      res => {\r\n        this.model = <patientModel>res;\r\n        this.model.password = '';\r\n      }\r\n    )\r\n  }\r\n\r\n  goToEdit(): void {\r\n    let booleanPromise = this.router.navigate([\"../editProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n\r\n}\r\nexport interface patientModel{\r\n  email : string |RegExp;\r\n  password : string;\r\n  name : string |RegExp;\r\n  surname : string |RegExp;\r\n  address : string |RegExp;\r\n  city : string |RegExp;\r\n  country : string |RegExp;\r\n  phone_number : string |RegExp;\r\n  insurance_number : string |RegExp;\r\n}\r\n\r\n\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">View profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"goToEdit()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             [disabled]=\"true\" >\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Address</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.address\" #address=\"ngModel\"  name=\"input_address\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>City</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.city\" #city=\"ngModel\" name=\"input_city\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\" padding-left: 25px; width: 250px;\">\r\n      <mat-label>Country</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.country\" #country=\"ngModel\"  name=\"input_country\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Phone number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.phone_number\" #phone_number=\"ngModel\" name=\"input_phone_number\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px;  width: 250px;\">\r\n      <mat-label>Insurance number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.insurance_number\" #insurance_number=\"ngModel\" name=\"input_insurance_number\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Edit profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatTableDataSource} from \"@angular/material/table\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {MatSort} from \"@angular/material/sort\";\r\nimport {MatPaginator} from \"@angular/material/paginator\";\r\n\r\n\r\n@Component({\r\n  selector: 'view-patients-nurse',\r\n  templateUrl: './view-patients-nurse.component.html',\r\n  styleUrls: ['./view-patients-nurse.component.css']\r\n})\r\nexport class ViewPatientsNurseComponent implements OnInit {\r\n  displayedColumns: string[] = ['email', 'name', 'surname', 'address',\r\n    'city', 'country', 'phone_number', 'insurance_number'];\r\n\r\n  dataSource = new MatTableDataSource();\r\n\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.http.get(\"http://localhost:8081/medicalStaff/getPatients\")\r\n      .subscribe((res) => {\r\n        // @ts-ignore\r\n        this.dataSource.data = res;\r\n      });\r\n\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.paginator = this.paginator;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Table of patients </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"dataSource\" matSort >\r\n\r\n    <ng-container matColumnDef=\"email\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Email </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Surname </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.surname}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"address\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"city\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> City </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.city}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"country\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Country </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.country}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"phone_number\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Phone number </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.phone_number}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"insurance_number\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Insurance number </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.insurance_number}} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}