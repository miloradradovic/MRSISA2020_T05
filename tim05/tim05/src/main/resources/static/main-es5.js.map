{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/add-appointment-type/add-appointment-type.component.ts","webpack:///src/app/add-appointment-type/add-appointment-type.component.html","webpack:///src/app/add-clinic-administrator-form/add-clinic-administrator-form.component.ts","webpack:///src/app/add-clinic-administrator-form/add-clinic-administrator-form.component.html","webpack:///src/app/add-clinic-center-administrator-form/add-clinic-center-administrator-form.component.ts","webpack:///src/app/add-clinic-center-administrator-form/add-clinic-center-administrator-form.component.html","webpack:///src/app/add-clinic-form/add-clinic-form.component.ts","webpack:///src/app/add-clinic-form/add-clinic-form.component.html","webpack:///src/app/add-diagnosis-form/add-diagnosis-form.component.ts","webpack:///src/app/add-diagnosis-form/add-diagnosis-form.component.html","webpack:///src/app/add-doctor-form/add-doctor-form.component.ts","webpack:///src/app/add-doctor-form/add-doctor-form.component.html","webpack:///src/app/add-hall-form/add-hall-form.component.ts","webpack:///src/app/add-hall-form/add-hall-form.component.html","webpack:///src/app/add-medicine-form/add-medicine-form.component.ts","webpack:///src/app/add-medicine-form/add-medicine-form.component.html","webpack:///src/app/add-nurse-form/add-nurse-form.component.ts","webpack:///src/app/add-nurse-form/add-nurse-form.component.html","webpack:///src/app/add-predifined-appointment/add-predifined-appointment.component.ts","webpack:///src/app/add-predifined-appointment/add-predifined-appointment.component.html","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/directive/RequiredPassDirective.ts","webpack:///src/app/edit-clinic-administrator/edit-clinic-administrator.component.ts","webpack:///src/app/edit-clinic-administrator/edit-clinic-administrator.component.html","webpack:///src/app/edit-clinic-center-administrator/edit-clinic-center-administrator.component.ts","webpack:///src/app/edit-clinic-center-administrator/edit-clinic-center-administrator.component.html","webpack:///src/app/edit-medical-staff/edit-medical-staff.component.ts","webpack:///src/app/edit-medical-staff/edit-medical-staff.component.html","webpack:///src/app/edit-patient/edit-patient.component.ts","webpack:///src/app/edit-patient/edit-patient.component.html","webpack:///src/app/guards/clinic-admin-guard.service.ts","webpack:///src/app/guards/clinic-center-admin-guard.service.ts","webpack:///src/app/guards/login-guard.service.ts","webpack:///src/app/guards/medicall-stuff-guard.service.ts","webpack:///src/app/guards/patient-guard.service.ts","webpack:///src/app/login/login.component.ts","webpack:///src/app/login/login.component.html","webpack:///src/app/navigation/navigation.component.ts","webpack:///src/app/navigation/navigation.component.html","webpack:///src/app/patient/clinics/clinics.component.ts","webpack:///src/app/patient/clinics/clinics.component.html","webpack:///src/app/request-list-patients/request-list-patients.component.ts","webpack:///src/app/request-list-patients/request-list-patients.component.html","webpack:///src/app/request-list-patients/dialog-overview.html","webpack:///src/app/services/authentication.service.ts","webpack:///src/app/services/interceptor.service.ts","webpack:///src/app/view-clinic-administrator/view-clinic-administrator.component.ts","webpack:///src/app/view-clinic-administrator/view-clinic-administrator.component.html","webpack:///src/app/view-clinic-center-administrator/view-clinic-center-administrator.component.ts","webpack:///src/app/view-clinic-center-administrator/view-clinic-center-administrator.component.html","webpack:///src/app/view-clinics/view-clinics.component.ts","webpack:///src/app/view-clinics/view-clinics.component.html","webpack:///src/app/view-medical-staff/view-medical-staff.component.ts","webpack:///src/app/view-medical-staff/view-medical-staff.component.html","webpack:///src/app/view-patient/view-patient.component.ts","webpack:///src/app/view-patient/view-patient.component.html","webpack:///src/app/view-patients-nurse/view-patients-nurse.component.ts","webpack:///src/app/view-patients-nurse/view-patients-nurse.component.html","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AddAppointmentTypeComponent","_snackBar","http","model","name","admin_id","parseInt","sessionStorage","getItem","url","console","log","post","subscribe","res","open","duration","err","test","addAppointmentType","selector","templateUrl","styleUrls","AddClinicAdminFromComponent","surname","email","password","clinic","clinics","get","hide","status","AddClinicAdmin","AddClinicCenterAdminFromComponent","AddClinicCenterAdmin","AddClinicFromComponent","address","description","AddClinic","AddDiagnosisFormComponent","router","buttonType","AddDiagnosis","navigateByUrl","onSubmit","AddDoctorFormComponent","workEnd","workStart","appointment_type_id","clinic_id","appointmentTypes","params1","set","params","addDoctor","AddHallFormComponent","changeDetectorRefs","displayedColumns","dataSource","selectedRowIndex","number","deleteModel","hall_id","toString","data","paginator","element","index","indexOf","splice","_updateChangeSubscription","AddHall","AddMedicineFromComponent","authenticated","AddMedicine","AddNurseFormComponent","addNurse","AddPredifinedAppointmentComponent","doctors","halls","duration_invalid","durControl","max","min","date_field","date","time","price","request","predefined","doctor_id","appointmentType_id","getDate","getMonth","getFullYear","value","append","addAppointment","onChange","AppComponent","title","appRoutes","path","canActivate","children","component","pathMatch","AppModule","provide","useClass","multi","forRoot","declarations","imports","providers","bootstrap","RequiredPassDirective","c","length","requiredLen","condition","useExisting","EditClinicAdministratorComponent","r","clinic_info","booleanPromise","navigate","relativeTo","checkPassword","editClinicAdmin","EditClinicCenterAdministratorComponent","editClinicCenterAdmin","EditMedicalStaff","type","editMedicalStaff","EditPatientProfile","city","country","phone_number","insurance_number","editPatient","ClinicAdminGuardService","authservice","route","state","providedIn","ClinicCenterAdminGuardService","LoginGuardService","isUserLoggedIn","MedicallStuffGuardService","PatientGuardService","LoginComponent","username","password2","myModel","hide1","hide2","authenticate","num","document","getElementById","style","display","error","pass1","pass2","loginAuth","registerPatient","NavigationComponent","currentRole","editProfile","logOut","ClinicsComponent","avg_rating","searchModel","avg_rate_lowest","avg_rate_highest","RequestListPatientsComponent","dialog","dialogRef","DialogOverview","width","height","text","sent","afterClosed","result","onClick","Send","User","token","AuthenticationService","httpClient","promise","reject","toPromise","tokenStr","setItem","decoded","removeItem","InterceptorService","next","clone","setHeaders","Authorization","handle","ViewClinicAdministratorComponent","goToEdit","ViewClinicCenterAdministratorComponent","ViewClinicsComponent","ViewMedicalStaff","ViewPatientProfile","ViewPatientsNurseComponent","sort","environment","production","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-add-appointment-type',\r\n  templateUrl: './add-appointment-type.component.html',\r\n  styleUrls: ['./add-appointment-type.component.css']\r\n})\r\nexport class AddAppointmentTypeComponent implements OnInit {\r\n\r\n  model : AppointmentTypeModel = {\r\n    name : '',\r\n    admin_id : parseInt(sessionStorage.getItem('id'))\r\n  }\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n\r\n  addAppointmentType() : void {\r\n    let url = \"http://localhost:8081/appointmentType/addAppointmentType\";\r\n    this.model.admin_id = parseInt(sessionStorage.getItem('user_id'));\r\n    console.log(this.model.admin_id);\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Appointment type successfully added\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        this._snackBar.open(\"Error has occurred while adding appointment type\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n        console.log(err);\r\n      });\r\n    }\r\n\r\n    checkValidation() : boolean {\r\n      return (/^[a-zA-z]+$/.test(this.model.name));\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\nexport interface AppointmentTypeModel{\r\n    name: string;\r\n    admin_id : number;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new appointment: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form name=\"form\" #f=\"ngForm\" (submit)=\"addAppointmentType()\" style=\"padding-left: 25px;\">\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Pick a name</mat-label>\r\n      <input [(ngModel)]=\"model.name\" name=\"appointment_name\" matInput pattern=\"[A-Z][a-z]*\" required>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add appointment</button>\r\n\r\n\r\n\r\n  </form>\r\n</div>","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient, HttpErrorResponse} from '@angular/common/http';\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-add-admin-form',\r\n    templateUrl: './add-clinic-administrator-form.component.html',\r\n    styleUrls: ['./add-clinic-administrator-form.component.css']\r\n})\r\nexport class AddClinicAdminFromComponent implements OnInit{\r\n\r\n        model: clinicAdminModel = {\r\n        name: '',\r\n        surname: '',\r\n        email: '',\r\n        password: '',\r\n        clinic: new class implements clinicModel {\r\n          address: string;\r\n          description: string;\r\n          name: string | RegExp;\r\n        }\r\n    }\r\n    clinics: any=[];\r\n    hide: boolean;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient){\r\n\r\n    }\r\n\r\n\r\n    ngOnInit(): void{\r\n         this.http.get(\"http://localhost:8081/clinic/getClinics\")\r\n          .subscribe((res)=>{\r\n            this.clinics = res;\r\n            this.model.clinic = res[0];\r\n        });\r\n        this.hide = true;\r\n    }\r\n\r\n    AddClinicAdmin(): void{\r\n        let url = \"http://localhost:8081/clinicAdministrator/addClinicAdministrator\"\r\n        this.http.post(url, this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Admin added successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n                if(err.status == 409)\r\n                {\r\n                  this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n                    duration: 2000,\r\n                  });\r\n\r\n                }\r\n                else\r\n                {\r\n                  this._snackBar.open(\"Error has occurred while adding admin!\", \"Close\", {\r\n                    duration: 2000,\r\n                  });\r\n\r\n                  console.log(err);\r\n                }\r\n            }\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport interface clinicAdminModel\r\n{\r\n    name: string | RegExp;\r\n    surname: string | RegExp;\r\n    email: string | RegExp;\r\n    password: string;\r\n    clinic: clinicModel;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new clinic administrator: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && AddClinicAdmin()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             required minlength=\"8\"\r\n             [type]=\"hide ? 'password' : 'text'\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 300px;\">\r\n      <mat-label>Clinic</mat-label>\r\n      <mat-select  [(ngModel)] = \"model.clinic\" name=\"input_clinic\" #clinic=\"ngModel\">\r\n        <mat-option  *ngFor=\"let c of clinics\" [value]=\"c\"> {{c.name}}, {{c.address}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add clinic administrator</button>\r\n\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {ReactiveFormsModule}  from \"@angular/forms\";\r\n\r\n@Component({\r\n    selector: 'app-add-admin-clinic-form',\r\n    templateUrl: './add-clinic-center-administrator-form.component.html',\r\n    styleUrls: ['./add-clinic-center-administrator-form.component.css']\r\n})\r\nexport class AddClinicCenterAdminFromComponent implements OnInit{\r\n\r\n    model: clinicCenterAdminModel = {\r\n        name: '',\r\n        surname: '',\r\n        email: '',\r\n        password: ''\r\n    }\r\n  hide: boolean;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient){\r\n\r\n    }\r\n\r\n    ngOnInit(): void{\r\n        this.hide = true;\r\n    }\r\n\r\n    AddClinicCenterAdmin(): void{\r\n        let url = \"http://localhost:8081/clinicCenterAdministrator/addClinicCenterAdministrator\"\r\n        this.http.post(url, this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Clinic center administrator added successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n              if(err.status == 409)\r\n              {\r\n                this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n                  duration: 2000,\r\n                });\r\n\r\n              }\r\n              else\r\n              {\r\n                this._snackBar.open(\"Error has occurred while adding clinic center administrator!\", \"Close\", {\r\n                  duration: 2000,\r\n                });\r\n                console.log(err);\r\n              }\r\n            }\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport interface clinicCenterAdminModel\r\n{\r\n    name: string | RegExp;\r\n    surname: string | RegExp;\r\n    email: string | RegExp;\r\n    password: string;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new clinic center administrator: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && AddClinicCenterAdmin()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n            required minlength=\"8\"  [type]=\"hide ? 'password' : 'text'\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add clinic center administrator</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n    selector: 'app-add-clinic-form',\r\n    templateUrl: './add-clinic-form.component.html',\r\n    styleUrls: ['./add-clinic-form.component.css']\r\n})\r\nexport class AddClinicFromComponent implements OnInit{\r\n\r\n    model: clinicModel = {\r\n        name: '',\r\n        address: '',\r\n        description: ''\r\n    }\r\n\r\n    ngOnInit(): void{\r\n\r\n    }\r\n\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient){\r\n\r\n    }\r\n\r\n    AddClinic(): void{\r\n        let url = \"http://localhost:8081/clinic/addClinic\"\r\n        this.http.post(url, this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Clinic added successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n              if(err.status == 409)\r\n              {\r\n                this._snackBar.open(\"Clinic already exists!\", \"Close\", {\r\n                  duration: 2000,\r\n                });\r\n\r\n              }\r\n              else\r\n              {\r\n                this._snackBar.open(\"Error has occurred while adding clinic!\", \"Close\", {\r\n                  duration: 2000,\r\n                });\r\n\r\n                console.log(err);\r\n              }\r\n            }\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport interface clinicModel\r\n{\r\n    name: string | RegExp;\r\n    address: string | RegExp;\r\n    description: string | RegExp;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new clinic: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && AddClinic()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Brooklyn Hospital\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Address</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.address\" #address=\"ngModel\"  name=\"input_address\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}[0-9]+\" required>\r\n      <mat-error *ngIf=\"address.invalid && address.errors?.pattern\">\r\n        Invalid name format! Example: Saint Patric 5\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Description</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.description\" #description=\"ngModel\"  name=\"input_description\"\r\n            pattern=\"([A-Z][a-z]+[ a-z.,0-9]*){1,}\" required>\r\n      <mat-error *ngIf=\"address.invalid && address.errors?.pattern\">\r\n        Invalid description format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add clinic</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { Router} from \"@angular/router\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'app-add-diagnosis-form',\r\n  templateUrl: './add-diagnosis-form.component.html',\r\n  styleUrls: ['./add-diagnosis-form.component.css']\r\n})\r\nexport class AddDiagnosisFormComponent implements OnInit{\r\n\r\n  model: diagnosisModel = {\r\n    name: '',\r\n    description: ''\r\n  }\r\n  buttonType: string;\r\n\r\n  ngOnInit(): void{\r\n\r\n  }\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient, private router: Router){\r\n\r\n  }\r\n\r\n  AddDiagnosis(): void{\r\n    let url = \"http://localhost:8081/diagnosis/addDiagnosis\"\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n\r\n        this._snackBar.open(\"Diagnosis added successfully!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          this._snackBar.open(\"Diagnosis already exists!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while adding diagnosis!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  onSubmit(buttonType): void {\r\n    if(buttonType===\"Add\"){\r\n      this.AddDiagnosis();\r\n    }\r\n    if(buttonType===\"Leave\"){\r\n      this.AddDiagnosis();\r\n      this.router.navigateByUrl('/');\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport interface diagnosisModel\r\n{\r\n  name: string | RegExp;\r\n  description: string | RegExp;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new diagnosis: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (ngSubmit)=\" f.form.valid && onSubmit(buttonType)\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid diagnosis name format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Description</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.description\" #description=\"ngModel\"  name=\"input_description\"\r\n             pattern=\"([A-Z][a-z]+[ a-z.,0-9]*){1,}\" required>\r\n      <mat-error *ngIf=\"description.invalid && description.errors?.pattern\">\r\n        Invalid diagnosis description format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button  (click)=\"onSubmit('Add')\">Add diagnosis</button>\r\n    <br> <br>\r\n    <button mat-raised-button (click)=\"onSubmit('Leave')\" >Add diagnosis and leave</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'app-add-doctor-form',\r\n  templateUrl: './add-doctor-form.component.html',\r\n  styleUrls: ['./add-doctor-form.component.css']\r\n})\r\nexport class AddDoctorFormComponent implements OnInit {\r\n\r\n  model: doctorModel = {\r\n    name : '',\r\n    surname : '',\r\n    email : '',\r\n    password : '',\r\n    workEnd : '',\r\n    workStart : '',\r\n    appointment_type_id : 0,\r\n    //ovde treba preuzeti od administratora koji dodaje kliniku zapravo\r\n    clinic_id : null\r\n  }\r\n\r\n  appointmentTypes : any=[];\r\n\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    let url = \"http://localhost:8081/appointmentType/getAppointmentTypes\";\r\n    this.http.get(url).subscribe(\r\n      res => {\r\n            this.appointmentTypes = res;\r\n      });\r\n\r\n    let params1 = new HttpParams().set('admin_id',sessionStorage.getItem('user_id'))\r\n    this.http.get(\"http://localhost:8081/clinicAdministrator/getAdminsClinic\",{params:params1}).subscribe(\r\n        res => {\r\n              this.model.clinic_id = res;\r\n              \r\n        });\r\n\r\n\r\n  }\r\n\r\n  addDoctor(): void{\r\n    let url =  \"http://localhost:8081/doctors/addDoctor\"\r\n    this.http.post(url,this.model).subscribe(\r\n        res => {\r\n          this._snackBar.open(\"Doctor added successfully\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        },\r\n        err => {\r\n          this._snackBar.open(\"Error has occurred while adding doctor\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n          console.log(err)\r\n        }\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport interface doctorModel\r\n{\r\n    name: string;\r\n    surname: string;\r\n    email : string;\r\n    password : string;\r\n    workStart : string;\r\n    workEnd : string;\r\n    appointment_type_id : number;\r\n    clinic_id : any;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new doctor: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"addDoctor()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             required minlength=\"8\"\r\n             [type]=\"hide ? 'password' : 'text'\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\" style=\"width: 250px;\">\r\n        Password must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field> \r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 200px;\" >\r\n      <input [(ngModel)] = \"model.workEnd\" name=\"input_workEnd\"\r\n      #workEnd=\"ngModel\" matInput placeholder=\"Work start\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime1\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime1></ngx-material-timepicker>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 225px;\" >\r\n      <input [(ngModel)] = \"model.workStart\" name=\"input_workStart\"\r\n      #workStart=\"ngModel\" matInput placeholder=\"Work end\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime2\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime2></ngx-material-timepicker>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 300px;\">\r\n      <mat-label>Appointment type</mat-label>\r\n      <mat-select  [(ngModel)] = \"model.appointment_type_id\" name=\"input_appointmentType\" #appointmentType=\"ngModel\" required>\r\n        <mat-option  *ngFor=\"let a of appointmentTypes\" [value]=\"a.id\"> {{a.name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add doctor</button>\r\n\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit, ViewChild, ChangeDetectorRef} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\n\r\n@Component({\r\n    selector: 'app-add-hall-form',\r\n    templateUrl: './add-hall-form.component.html',\r\n    styleUrls: ['./add-hall-form.component.css']\r\n})\r\nexport class AddHallFormComponent implements OnInit{\r\n\r\n    displayedColumns: string[] = ['name', 'number', 'delete'];\r\n\r\n    dataSource = new MatTableDataSource();\r\n\r\n    selectedRowIndex: number = 0;\r\n\r\n    model: hallModel = {\r\n        name: '',\r\n        number: 0\r\n    }\r\n\r\n    clinic_id : any = '';\r\n\r\n    deleteModel : deleteHall = {\r\n        hall_id : 0\r\n    }\r\n\r\n    @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient,private changeDetectorRefs: ChangeDetectorRef){\r\n\r\n    }\r\n\r\n\r\n    ngOnInit(): void{\r\n      //vrednost parametra clinic_id treba da se dinamicki popuni tako da se preuzimaju hale tacno odredjene klinike.\r\n\r\n      let params1 = new HttpParams().set('admin_id',sessionStorage.getItem('user_id'))\r\n\r\n      this.http.get(\"http://localhost:8081/clinicAdministrator/getAdminsClinic\",{params:params1}).subscribe(\r\n        res => {\r\n          this.clinic_id = res.toString();\r\n          let params = new HttpParams().set('clinic_id', this.clinic_id);\r\n          this.http.get(\"http://localhost:8081/halls/getClinicHall\",{params:params})\r\n          .subscribe((res) => {\r\n          // @ts-ignore\r\n             this.dataSource.data = res;\r\n\r\n          });\r\n        });\r\n\r\n        let params = new HttpParams().set('clinic_id', \"1\");\r\n        this.http.get(\"http://localhost:8081/halls/getClinicHall\",{params:params})\r\n        .subscribe((res) => {\r\n        // @ts-ignore\r\n           this.dataSource.data = res;\r\n      });\r\n\r\n        this.dataSource.paginator = this.paginator;\r\n    }\r\n\r\n    AddHall(): void{\r\n        let url = \"http://localhost:8081/halls/addHall\"\r\n        this.http.post(url, this.model).subscribe(\r\n            res => {\r\n\r\n              //kada dobijem odgovor da sam uspeo da dodam salu hocu da posaljem upit za uzimanje svih sala da bih u tabeli prikazao\r\n              let params = new HttpParams().set('clinic_id', this.clinic_id);\r\n              this.http.get(\"http://localhost:8081/halls/getClinicHall\",{params:params})\r\n              .subscribe((res) => {\r\n              // @ts-ignore\r\n              this.dataSource.data = res;\r\n\r\n              });\r\n\r\n              this._snackBar.open(\"Hall added successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n          err => {\r\n            if(err.status == 409)\r\n            {\r\n              this._snackBar.open(\"Hall name/number already taken!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            }\r\n            else\r\n            {\r\n              this._snackBar.open(\"Error has occurred while adding hall!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            }\r\n          }\r\n        );\r\n    }\r\n\r\n    deleteHall(element): void{\r\n        let params = new HttpParams().set(\"hall_id\", element.id.toString());\r\n        this.http.delete(\"http://localhost:8081/halls/deleteHall\",{params:params}).subscribe(\r\n          res =>{\r\n            console.log(\"inside the res\");\r\n            let index = this.dataSource.data.indexOf(element);\r\n            this.dataSource.data.splice(index,1);\r\n            this.dataSource._updateChangeSubscription();\r\n            this._snackBar.open(\"Hall deleted successfully.\", \"Close\", {\r\n            duration: 2000,\r\n            });\r\n          }\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport interface hallModel\r\n{\r\n    name: string | RegExp;\r\n    number: Number | RegExp;\r\n}\r\n\r\nexport interface deleteHall{\r\n    hall_id : number;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new hall: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && AddHall()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Operation Hall\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.number\" #number=\"ngModel\"  name=\"input_number\"\r\n             pattern=\"[0-9]*\" required>\r\n      <mat-error *ngIf=\"number.invalid && number.errors?.pattern\">\r\n        Invalid number format! Example: 5\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <button mat-raised-button style=\"margin-left: 25px;\" >Save hall</button>\r\n\r\n    <br>\r\n\r\n    <div class=\"mat-elevation-z8\" style=\"width: 650px;float:left;margin-top: 2%;\">\r\n\r\n      <table mat-table [dataSource]=\"dataSource\" >\r\n\r\n          <ng-container matColumnDef=\"name\">\r\n            <th mat-header-cell *matHeaderCellDef> Name </th>\r\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n          </ng-container>\r\n\r\n          <ng-container matColumnDef=\"number\">\r\n              <th mat-header-cell *matHeaderCellDef> Number </th>\r\n              <td mat-cell *matCellDef=\"let element\"> {{element.number}} </td>\r\n            </ng-container>\r\n\r\n          <ng-container matColumnDef=\"delete\">\r\n              <th mat-header-cell *matHeaderCellDef> Delete </th>\r\n              <td mat-cell *matCellDef=\"let element\" (click)=\"deleteHall(element)\" style=\"width: 150px;\"><span class=\"fake-link\"><mat-icon [ngStyle]=\"{'color':'red'}\">clear</mat-icon></span></td>\r\n          </ng-container>\r\n\r\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\" ></tr>\r\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" ></tr>\r\n\r\n      </table>\r\n\r\n      <mat-paginator [pageSizeOptions]=\"[5]\" showFirstLastButtons></mat-paginator>\r\n\r\n     </div>\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport { Router} from \"@angular/router\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'app-add-medicine-form',\r\n  templateUrl: './add-medicine-form.component.html',\r\n  styleUrls: ['./add-medicine-form.component.css']\r\n})\r\nexport class AddMedicineFromComponent implements OnInit{\r\n\r\n  model: medicineModel = {\r\n    name: '',\r\n    description: '',\r\n    authenticated: false\r\n  }\r\n  buttonType: string;\r\n\r\n  ngOnInit(): void{\r\n\r\n  }\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient, private router: Router){\r\n\r\n  }\r\n\r\n  AddMedicine(): void{\r\n    let url = \"http://localhost:8081/medicine/addMedicine\"\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Medicine added successfully!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          this._snackBar.open(\"Medicine already exists!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while adding medicine!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n\r\n  onSubmit(buttonType): void {\r\n\r\n    if(buttonType===\"Add\"){\r\n      this.AddMedicine();\r\n    }\r\n    if(buttonType===\"Leave\"){\r\n      this.AddMedicine();\r\n      this.router.navigateByUrl('/');\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport interface medicineModel\r\n{\r\n  name: string | RegExp;\r\n  description: string;\r\n  authenticated: boolean;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new medicine: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (ngSubmit)=\" f.form.valid && onSubmit(buttonType)\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid medicine name format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Description</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.description\" #description=\"ngModel\"  name=\"input_description\"\r\n            pattern=\"([A-Z][a-z]+[ a-z.,0-9]*){1,}\" required>\r\n      <mat-error *ngIf=\"description.invalid && description.errors?.pattern\">\r\n        Invalid medicine description format!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button  (click)=\"onSubmit('Add')\">Add medicine</button>\r\n    <br> <br>\r\n    <button mat-raised-button (click)=\"onSubmit('Leave')\" >Add medicine and leave</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\n\r\n@Component({\r\n  selector: 'app-add-doctor-form',\r\n  templateUrl: './add-nurse-form.component.html',\r\n  styleUrls: ['./add-nurse-form.component.css']\r\n})\r\nexport class AddNurseFormComponent implements OnInit {\r\n\r\n  model: nurseModel = {\r\n    name : '',\r\n    surname : '',\r\n    email : '',\r\n    password : '',\r\n    workEnd : '',\r\n    workStart : '',\r\n  }\r\n\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  addNurse(): void{\r\n    let url =  \"http://localhost:8081/nurse/addNurse\"\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Nurse added successfully\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409){\r\n          this._snackBar.open(\"Nurse with that email already exists!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n        }else{\r\n          this._snackBar.open(\"Error has occurred while adding nurse\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport interface nurseModel\r\n{\r\n  name: string;\r\n  surname: string;\r\n  email : string;\r\n  password : string;\r\n  workStart : string;\r\n  workEnd : string;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new nurse: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"addNurse()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             required minlength=\"8\"\r\n             [type]=\"hide ? 'password' : 'text'\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\" style=\"width: 250px;\">\r\n        Password must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 200px;\" >\r\n      <input [(ngModel)] = \"model.workEnd\" name=\"input_workEnd\"\r\n             #workEnd=\"ngModel\" matInput placeholder=\"Work start\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime1\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime1></ngx-material-timepicker>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 225px;\" >\r\n      <input [(ngModel)] = \"model.workStart\" name=\"input_workStart\"\r\n             #workStart=\"ngModel\" matInput placeholder=\"Work end\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime2\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime2></ngx-material-timepicker>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add nurse</button>\r\n\r\n\r\n\r\n  </form>\r\n</div>\r\n","import { Component, OnInit} from '@angular/core';\r\nimport {HttpClient, HttpParams} from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport { FormControl, Validators } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'app-add-predifined-appointment',\r\n  templateUrl: './add-predifined-appointment.component.html',\r\n  styleUrls: ['./add-predifined-appointment.component.css']\r\n})\r\nexport class AddPredifinedAppointmentComponent implements OnInit {\r\n\r\n  doctors: any=[];\r\n  halls: any=[];\r\n  appointmentTypes: any = [];\r\n  duration_invalid : boolean = true;\r\n\r\n  durControl : FormControl = new FormControl(10, [Validators.max(60), Validators.min(10)])\r\n\r\n  model : appointmentModel = {\r\n    date_field : null,\r\n    date : '',\r\n    time : '',\r\n    duration : 0,\r\n    price : 0,\r\n    request : false,\r\n    predefined : true,\r\n    doctor_id : null,\r\n    hall_id : null,\r\n    appointmentType_id: null,\r\n    clinic_id : 1\r\n  };\r\n\r\n\r\n\r\n  constructor(private _snackBar: MatSnackBar,private http: HttpClient) {\r\n      \r\n   }\r\n  /**  Treba dodati deo u kom se inicijalizuje za koju kliniku se trazi admin\r\n   * u ovom slucaju je to hardcodovana vrednost jer jos nemamo logovanje **/\r\n\r\n  ngOnInit(): void {\r\n\r\n    let params1 = new HttpParams().set('admin_id',sessionStorage.getItem('user_id'))\r\n    this.http.get(\"http://localhost:8081/clinicAdministrator/getAdminsClinic\",{params:params1}).subscribe(\r\n      res => {\r\n            this.model.clinic_id = res;\r\n            console.log(this.model.clinic_id);\r\n            let params = new HttpParams().set('clinic_id', this.model.clinic_id.toString() );\r\n            let url = \"http://localhost:8081/halls/getClinicHall\";\r\n            this.http.get(url,{params:params}).subscribe(\r\n              res => {\r\n                    this.halls = res;\r\n              });\r\n            \r\n            \r\n      });\r\n    console.log(sessionStorage.getItem('token'));\r\n    this.http.get(\"http://localhost:8081/appointmentType/getAppointmentTypes\").subscribe(\r\n        res => {\r\n              this.appointmentTypes = res;\r\n        });\r\n\r\n\r\n  }\r\n\r\n  addAppointment() : void {\r\n    let url = \"http://localhost:8081/appointment/addAppointment\";\r\n    this.model.date = this.model.date_field.getDate() + \"/\" + (this.model.date_field.getMonth()+1) + \"/\" + this.model.date_field.getFullYear();\r\n    this.model.duration = this.durControl.value;\r\n    this.http.post(url, this.model).subscribe(\r\n      res => {\r\n            this._snackBar.open(\"Appointment added successfully\", \"Close\", {\r\n              duration: 2000,\r\n      });\r\n    });\r\n\r\n  }\r\n\r\n  onChange() {\r\n    let params = new HttpParams();\r\n    params = params.append('clinic_id', this.model.clinic_id.toString());\r\n    params = params.append('appointment_type_id',this.model.appointmentType_id.toString());\r\n    let url = \"http://localhost:8081/doctors/getDoctorsAppointment\";;\r\n    this.http.get(url,{params:params}).subscribe(\r\n      res => {\r\n            this.doctors = res;\r\n      });\r\n    \r\n    \r\n    \r\n}\r\n\r\n}\r\n\r\nexport interface appointmentModel\r\n{\r\n    date_field : Date;\r\n    date : string;\r\n    time : string;\r\n    duration : number;\r\n    price : number;\r\n    request : boolean;\r\n    predefined : boolean;\r\n    doctor_id : number;\r\n    hall_id : number;\r\n    appointmentType_id: number;\r\n    clinic_id :any;\r\n    \r\n}\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Add new appointment: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"addAppointment()\" style=\"padding-left: 25px;\">\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Choose a date</mat-label>\r\n      <input [(ngModel)] = \"model.date_field\" name=\"input_date_field\"\r\n      #date_field=\"ngModel\" matInput [matDatepicker]=\"picker\" readonly required>\r\n      <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n      <mat-datepicker #picker ></mat-datepicker>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 200px;\" >\r\n      <input [(ngModel)] = \"model.time\" name=\"input_time\"\r\n      #time=\"ngModel\" matInput placeholder=\"Enter time\" aria-label=\"24hr format\" [ngxTimepicker]=\"fullTime\" [format]=\"24\"  readonly required>\r\n    </mat-form-field>\r\n\r\n    <ngx-material-timepicker #fullTime></ngx-material-timepicker>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px;width: 200px;\">\r\n      <mat-label>Duration</mat-label>\r\n      <input name=\"input_duration\" matInput type=\"number\" placeholder=\"Ex. 12\" min=\"10\" max=\"60\" [formControl]=\"durControl\" required>\r\n      <span matSuffix>min</span>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Appointment type</mat-label>\r\n      <mat-select [(ngModel)] = \"model.appointmentType_id\" name=\"input_appointmentType_id\"\r\n      #appointmentType_id=\"ngModel\" (ngModelChange)=\"onChange()\" required>\r\n      <mat-option *ngFor=\"let a of appointmentTypes\" [value]=\"a.id\" >{{a.name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px;width: 260px;\">\r\n      <mat-label>Doctor</mat-label>\r\n      <mat-select [(ngModel)] = \"model.doctor_id\" name=\"input_doctor_id\"\r\n      #doctor_id=\"ngModel\" required >\r\n      <mat-option *ngFor=\"let d of doctors\" [value]=\"d.id\" >{{d.name}} {{d.surname}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Hall</mat-label>\r\n      <mat-select [(ngModel)] = \"model.hall_id\" name=\"input_hall_id\"\r\n      #hall_id=\"ngModel\" required>\r\n        <mat-option *ngFor=\"let h of halls\" [value]=\"h.id\" >{{h.name}} {{h.number}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px;width: 260px;\">\r\n      <mat-label>Price</mat-label>\r\n      <input  [(ngModel)] = \"model.price\" name=\"input_price\"\r\n      #price=\"ngModel\"  matInput type=\"number\" min = \"1000\">\r\n      <span matSuffix>$</span>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Add appointment</button>\r\n\r\n\r\n\r\n  </form>\r\n</div>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title = 't05-ng-app';\r\n}\r\n","<div>\r\n  <app-navigation></app-navigation>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport {MatDatepickerModule} from '@angular/material/datepicker';\r\nimport {MatNativeDateModule} from '@angular/material/core';\r\nimport {MatCheckboxModule} from '@angular/material/checkbox';\r\nimport {MatInputModule} from '@angular/material/input';\r\nimport {MatFormFieldModule} from '@angular/material/form-field';\r\nimport {MatSelectModule} from '@angular/material/select';\r\nimport {NgxMaterialTimepickerModule} from 'ngx-material-timepicker';\r\nimport {MatDividerModule} from '@angular/material/divider';\r\nimport {MatButtonModule} from '@angular/material/button';\r\nimport { AppComponent } from './app.component';\r\nimport { NavigationComponent } from './navigation/navigation.component';\r\nimport { Routes, RouterModule} from \"@angular/router\";\r\nimport {FormsModule, ReactiveFormsModule} from \"@angular/forms\";\r\nimport { AddDoctorFormComponent } from './add-doctor-form/add-doctor-form.component';\r\nimport { AddClinicCenterAdminFromComponent } from './add-clinic-center-administrator-form/add-clinic-center-administrator-form.component';\r\nimport { AddClinicFromComponent } from './add-clinic-form/add-clinic-form.component';\r\nimport { AddClinicAdminFromComponent } from './add-clinic-administrator-form/add-clinic-administrator-form.component';\r\nimport { EditPatientProfile } from './edit-patient/edit-patient.component';\r\nimport { AddHallFormComponent } from './add-hall-form/add-hall-form.component';\r\nimport { EditMedicalStaff } from './edit-medical-staff/edit-medical-staff.component';\r\nimport { HttpClientModule, HTTP_INTERCEPTORS } from \"@angular/common/http\"\r\nimport {AddMedicineFromComponent} from \"./add-medicine-form/add-medicine-form.component\";\r\nimport {AddDiagnosisFormComponent} from \"./add-diagnosis-form/add-diagnosis-form.component\";\r\nimport {DialogOverview, RequestListPatientsComponent} from \"./request-list-patients/request-list-patients.component\";\r\nimport { AddPredifinedAppointmentComponent } from './add-predifined-appointment/add-predifined-appointment.component';\r\nimport { AddAppointmentTypeComponent } from './add-appointment-type/add-appointment-type.component';\r\nimport {AddNurseFormComponent} from \"./add-nurse-form/add-nurse-form.component\";\r\nimport {ViewClinicsComponent} from \"./view-clinics/view-clinics.component\";\r\nimport {MatIconModule} from \"@angular/material/icon\";\r\nimport {MatTableModule} from \"@angular/material/table\";\r\nimport {MatPaginatorModule} from \"@angular/material/paginator\";\r\nimport {MatSnackBarModule} from \"@angular/material/snack-bar\";\r\nimport {MatDialogModule} from \"@angular/material/dialog\";\r\nimport {ViewPatientsNurseComponent} from \"./view-patients-nurse/view-patients-nurse.component\";\r\nimport {MatSortModule} from \"@angular/material/sort\";\r\nimport {EditClinicAdministratorComponent} from \"./edit-clinic-administrator/edit-clinic-administrator.component\";\r\nimport { ClinicsComponent } from './patient/clinics/clinics.component';\r\nimport {MatExpansionModule} from '@angular/material/expansion';\r\nimport { InterceptorService } from './services/interceptor.service';\r\nimport { PatientGuardService } from './guards/patient-guard.service';\r\nimport { LoginComponent } from './login/login.component';\r\nimport {MatTabsModule} from '@angular/material/tabs';\r\nimport { ClinicAdminGuardService } from './guards/clinic-admin-guard.service';\r\nimport { LoginGuardService } from './guards/login-guard.service';\r\nimport { ClinicCenterAdminGuardService } from './guards/clinic-center-admin-guard.service';\r\nimport { MedicallStuffGuardService } from './guards/medicall-stuff-guard.service';\r\nimport {MatToolbarModule} from '@angular/material/toolbar';\r\nimport {MatMenuModule} from '@angular/material/menu';\r\nimport {RequiredPassDirective} from \"./directive/RequiredPassDirective\";\r\nimport {EditClinicCenterAdministratorComponent} from \"./edit-clinic-center-administrator/edit-clinic-center-administrator.component\";\r\nimport {ViewClinicAdministratorComponent} from \"./view-clinic-administrator/view-clinic-administrator.component\";\r\nimport {ViewClinicCenterAdministratorComponent} from \"./view-clinic-center-administrator/view-clinic-center-administrator.component\";\r\nimport {ViewMedicalStaff} from \"./view-medical-staff/view-medical-staff.component\";\r\nimport {ViewPatientProfile} from \"./view-patient/view-patient.component\";\r\n\r\n\r\n\r\n\r\n\r\nconst appRoutes : Routes = [\r\n  {\r\n    path: 'clinicAdmin',\r\n    canActivate: [ClinicAdminGuardService],\r\n    children: [\r\n      {\r\n        path : 'addDoctor',\r\n        component : AddDoctorFormComponent\r\n      },\r\n      {\r\n        path : 'addPredefinedAppointment',\r\n        component : AddPredifinedAppointmentComponent\r\n      },\r\n      {\r\n        path : 'addAppointmentType',\r\n        component: AddAppointmentTypeComponent\r\n      },\r\n      {\r\n        path : 'addHall',\r\n        component : AddHallFormComponent\r\n      },\r\n      {\r\n        path: 'editProfile',\r\n        component : EditClinicAdministratorComponent\r\n      },\r\n      {\r\n        path: 'viewProfile',\r\n        component : ViewClinicAdministratorComponent\r\n      },\r\n      {\r\n        path : 'addNurse',\r\n        component : AddNurseFormComponent\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path: 'clinicCenterAdmin',\r\n    canActivate: [ClinicCenterAdminGuardService],\r\n    children: [\r\n      {\r\n        path: 'addClinicCenterAdministrator',\r\n        component : AddClinicCenterAdminFromComponent\r\n      },\r\n      {\r\n        path: 'addClinic',\r\n        component : AddClinicFromComponent\r\n      },\r\n      {\r\n        path: 'addClinicAdministrator',\r\n        component : AddClinicAdminFromComponent\r\n      },\r\n      {\r\n        path: 'editProfile',\r\n        component : EditClinicCenterAdministratorComponent\r\n      },\r\n      {\r\n        path: 'viewProfile',\r\n        component : ViewClinicCenterAdministratorComponent\r\n      },\r\n      {\r\n        path : 'addMedicine',\r\n        component : AddMedicineFromComponent\r\n      },\r\n      {\r\n        path : 'addDiagnosis',\r\n        component : AddDiagnosisFormComponent\r\n      },\r\n      {\r\n        path : 'requestTable',\r\n        component : RequestListPatientsComponent\r\n      },\r\n    ]\r\n  },\r\n\r\n  {\r\n    path:'patient',\r\n    canActivate: [PatientGuardService],\r\n    children:[\r\n      {\r\n        path: 'editProfile',\r\n        component : EditPatientProfile\r\n      },\r\n      {\r\n        path: 'viewProfile',\r\n        component : ViewPatientProfile\r\n      },\r\n      {\r\n        path: 'clinics',\r\n        component: ClinicsComponent\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    path : '',\r\n    component : LoginComponent,\r\n    pathMatch : 'full',\r\n    canActivate : [LoginGuardService]\r\n\r\n  },\r\n\r\n  {\r\n    path:'staff',\r\n    canActivate: [MedicallStuffGuardService],\r\n    children:[\r\n      {\r\n        path: 'editProfile',\r\n        component : EditMedicalStaff,\r\n        canActivate : [MedicallStuffGuardService]\r\n      },\r\n\r\n      {\r\n        path: 'viewProfile',\r\n        component : ViewMedicalStaff,\r\n        canActivate : [MedicallStuffGuardService]\r\n      },\r\n\r\n      {\r\n        path : 'viewPatients',\r\n        component : ViewPatientsNurseComponent,\r\n        canActivate : [MedicallStuffGuardService]\r\n      },\r\n\r\n\r\n    ]\r\n  },\r\n\r\n  {\r\n    path : '**',\r\n    component : NavigationComponent\r\n  }\r\n\r\n\r\n]\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    NavigationComponent,\r\n    AddDoctorFormComponent,\r\n    AddClinicCenterAdminFromComponent,\r\n    AddClinicFromComponent,\r\n    AddClinicAdminFromComponent,\r\n    AddMedicineFromComponent,\r\n    AddDiagnosisFormComponent,\r\n    RequestListPatientsComponent,\r\n    EditPatientProfile,\r\n    AddPredifinedAppointmentComponent,\r\n    AddHallFormComponent,\r\n    EditMedicalStaff,\r\n    AddAppointmentTypeComponent,\r\n    AddNurseFormComponent,\r\n    ViewClinicsComponent,\r\n    ViewPatientsNurseComponent,\r\n    DialogOverview,\r\n    EditClinicAdministratorComponent,\r\n    ClinicsComponent,\r\n    LoginComponent,\r\n    RequiredPassDirective,\r\n    EditClinicCenterAdministratorComponent,\r\n    ViewClinicAdministratorComponent,\r\n    ViewClinicCenterAdministratorComponent,\r\n    ViewMedicalStaff,\r\n    ViewPatientProfile\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    HttpClientModule,\r\n    RouterModule.forRoot(appRoutes),\r\n    BrowserAnimationsModule,\r\n    MatCheckboxModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    NgxMaterialTimepickerModule,\r\n    MatSelectModule,\r\n    MatDividerModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSnackBarModule,\r\n    MatDialogModule,\r\n    FormsModule,\r\n    MatSortModule,\r\n    MatExpansionModule,\r\n    MatTabsModule,\r\n    MatToolbarModule,\r\n    MatMenuModule\r\n\r\n  ],\r\n  providers: [MatDatepickerModule,\r\n    {\r\n      provide: HTTP_INTERCEPTORS, useClass:InterceptorService, multi:true\r\n    }\r\n  ],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import {Directive, Input} from \"@angular/core\";\r\nimport {AbstractControl, NG_VALIDATORS, Validator} from \"@angular/forms\";\r\n\r\n@Directive({\r\n  selector: '[requiredLen]',\r\n  providers: [\r\n    {provide: NG_VALIDATORS,useExisting:RequiredPassDirective, multi: true}\r\n  ]\r\n})\r\nexport class RequiredPassDirective implements Validator {\r\n  @Input(\"requiredLen\")\r\n  requiredLen: boolean;\r\n\r\n  validate(c:AbstractControl) {\r\n\r\n    let value = c.value;\r\n    if (value == null) value = '';\r\n    if ((value.length > 0 && value.length < 8)) {\r\n      return {\r\n        requiredLen: {condition:false}\r\n      };\r\n    }\r\n    return null;\r\n  }\r\n\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-clinic-administrator',\r\n  templateUrl: './edit-clinic-administrator.component.html',\r\n  styleUrls: ['./edit-clinic-administrator.component.css']\r\n})\r\nexport class EditClinicAdministratorComponent implements OnInit{\r\n\r\n  model: clinicAdminModel = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: '',\r\n    clinic: new class implements clinicModel {\r\n      address: '';\r\n      description: '';\r\n      name: '';\r\n    }\r\n  }\r\n  hide: boolean;\r\n  clinic_info : string;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n\r\n    this.http.get(\"http://localhost:8081/clinicAdministrator/getClinicAdministrator\")\r\n      .subscribe((res)=>{\r\n        this.model = <clinicAdminModel>res;\r\n        this.model.password = '';\r\n        this.clinic_info = this.model.clinic.name + \", \" + this.model.clinic.address;\r\n      });\r\n    this.hide = true;\r\n\r\n  }\r\n\r\n  editClinicAdmin(): void{\r\n    let url = \"http://localhost:8081/clinicAdministrator/editClinicAdministrator\"\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Your profile has been updated successfully!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while adding admin!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n    let booleanPromise = this.router.navigate([\"../viewProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n  checkPassword() {\r\n\r\n    return this.model.password.length == 0 || this.model.password.length >= 8;\r\n  }\r\n}\r\n\r\n\r\nexport interface clinicAdminModel\r\n{\r\n  name: string | RegExp;\r\n  surname: string | RegExp;\r\n  email: string | RegExp;\r\n  password: string;\r\n  clinic: clinicModel;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Edit profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && checkPassword() && editClinicAdmin()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern= \"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required [disabled]=\"true\">\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>New password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n            [type]=\"hide ? 'password' : 'text'\"\r\n             [requiredLen]=\"checkPassword()\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\" width: 250px;\">\r\n      <mat-label>Clinic</mat-label>\r\n      <input matInput  [(ngModel)] = \"clinic_info\" #clinic=\"ngModel\"  name=\"input_clinic\"\r\n             required [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Update profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-edit-clinic-center-administrator',\r\n  templateUrl: './edit-clinic-center-administrator.component.html',\r\n  styleUrls: ['./edit-clinic-center-administrator.component.css']\r\n})\r\nexport class EditClinicCenterAdministratorComponent implements OnInit{\r\n\r\n  model: clinicCenterAdminModel = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: '',\r\n\r\n  }\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n\r\n    this.http.get(\"http://localhost:8081/clinicCenterAdministrator/getClinicCenterAdministrator\")\r\n      .subscribe((res)=>{\r\n        this.model = <clinicCenterAdminModel>res;\r\n        this.model.password = '';\r\n      });\r\n    this.hide = true;\r\n\r\n  }\r\n\r\n  editClinicCenterAdmin(): void{\r\n    let url = \"http://localhost:8081/clinicCenterAdministrator/editClinicCenterAdministrator\"\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Your profile has been updated successfully!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while adding admin!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n    let booleanPromise = this.router.navigate([\"../viewProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n  checkPassword() {\r\n\r\n    return this.model.password.length == 0 || this.model.password.length >= 8;\r\n  }\r\n}\r\n\r\n\r\nexport interface clinicCenterAdminModel\r\n{\r\n  name: string | RegExp;\r\n  surname: string | RegExp;\r\n  email: string | RegExp;\r\n  password: string;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Edit profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && checkPassword() && editClinicCenterAdmin()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern= \"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required [disabled]=\"true\">\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>New password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             [type]=\"hide ? 'password' : 'text'\"\r\n             [requiredLen]=\"checkPassword()\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Update profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, Directive, Input, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {patientModel} from \"../edit-patient/edit-patient.component\";\r\nimport {AbstractControl, FormControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n    selector: 'app-edit-medical-staff',\r\n    templateUrl: './edit-medical-staff.component.html',\r\n    styleUrls: ['./edit-medical-staff.component.css']\r\n})\r\nexport class EditMedicalStaff implements OnInit{\r\n\r\n    model: medicalStaffModel = {\r\n        email : '',\r\n        password : '',\r\n        name : '',\r\n        surname : '',\r\n        type: '',\r\n        workStart: '',\r\n        workEnd: '',\r\n    }\r\n  hide: boolean;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n                private router: Router, private r:ActivatedRoute){\r\n\r\n    }\r\n\r\n    ngOnInit(): void{\r\n      this.hide = true;\r\n      let url = \"http://localhost:8081/medicalStaff/getData\";\r\n      this.http.get(url).subscribe(\r\n        res => {\r\n          this.model = <medicalStaffModel>res;\r\n          this.model.password = '';\r\n        }\r\n      )\r\n    }\r\n\r\n    editMedicalStaff(): void{\r\n        let url = \"http://localhost:8081/medicalStaff/editMedicalStaff\"\r\n        this.http.post(url,this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Your profile has been updated successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n              this._snackBar.open(\"Error has occurred while updating your profile!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n                console.log(err)\r\n            }\r\n        );\r\n        let booleanPromise = this.router.navigate([\"../viewProfile\"], {relativeTo: this.r});\r\n    }\r\n  checkPassword() {\r\n\r\n    return this.model.password.length === 0 || this.model.password.length >= 8;\r\n  }\r\n}\r\n    export interface medicalStaffModel{\r\n        email : string |RegExp;\r\n        password : string;\r\n        name : string |RegExp;\r\n        surname : string |RegExp;\r\n        type : string;\r\n        workStart : string;\r\n        workEnd : string;\r\n\r\n    }\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Edit profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && checkPassword() && editMedicalStaff()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required [disabled]=\"true\"/>\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>New password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             [type]=\"hide ? 'password' : 'text'\"\r\n             [requiredLen]=\"checkPassword()\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Type</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.type\" name=\"input_type\"\r\n             #email=\"ngModel\" [disabled]=\"true\"/>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Update profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, Directive, Input, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {AbstractControl, FormControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n    selector: 'app-edit-patient',\r\n    templateUrl: './edit-patient.component.html',\r\n    styleUrls: ['./edit-patient.component.css']\r\n})\r\nexport class EditPatientProfile implements OnInit{\r\n\r\n    model: patientModel = {\r\n        email : '',\r\n        password : '',\r\n        name : '',\r\n        surname : '',\r\n        address : '',\r\n        city : '',\r\n        country : '',\r\n        phone_number : '',\r\n        insurance_number : ''\r\n    }\r\n  hide: boolean;\r\n\r\n    constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n                private router: Router, private r:ActivatedRoute){\r\n\r\n    }\r\n\r\n    ngOnInit(): void{\r\n        this.hide = true;\r\n        let url = \"http://localhost:8081/patients/getPatient\";\r\n        this.http.get(url).subscribe(\r\n          res => {\r\n            this.model = <patientModel>res;\r\n            this.model.password = '';\r\n          }\r\n        )\r\n    }\r\n\r\n    editPatient(): void{\r\n        let url = \"http://localhost:8081/patients/editPatient\"\r\n        this.http.post(url,this.model).subscribe(\r\n            res => {\r\n              this._snackBar.open(\"Your profile has been updated successfully!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n\r\n            },\r\n            err => {\r\n              this._snackBar.open(\"Error has occurred while updating your profile!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n              console.log(err)\r\n            }\r\n        );\r\n      let booleanPromise = this.router.navigate([\"../viewProfile\"], {relativeTo: this.r});\r\n    }\r\n  checkPassword() {\r\n\r\n    return this.model.password.length == 0 || this.model.password.length >= 8;\r\n  }\r\n}\r\n    export interface patientModel{\r\n        email : string |RegExp;\r\n        password : string;\r\n        name : string |RegExp;\r\n        surname : string |RegExp;\r\n        address : string |RegExp;\r\n        city : string |RegExp;\r\n        country : string |RegExp;\r\n        phone_number : string |RegExp;\r\n        insurance_number : string |RegExp;\r\n    }\r\n\r\n\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Edit profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"f.form.valid && checkPassword() && editPatient()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             pattern=\"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n        Invalid name format! Example: Mike\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             pattern= \"[A-Z][a-z]*\" required>\r\n      <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n        Invalid surname format! Example: Portman\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n             required [disabled]=\"true\">\r\n      <mat-error *ngIf=\" email.invalid\">\r\n        Invalid email format! Example: example_1@mail.com\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>New password</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n             [type]=\"hide ? 'password' : 'text'\"\r\n             [requiredLen]=\"checkPassword()\">\r\n\r\n      <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n      <mat-error *ngIf=\"password.invalid\">\r\n        Password field must be at least 8 characters long!\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Address</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.address\" #address=\"ngModel\"  name=\"input_address\"\r\n             pattern=\"([A-Z][a-z]+[ ]*){1,}[0-9]+\" required>\r\n      <mat-error *ngIf=\"address.invalid && address.errors?.pattern\">\r\n        Invalid address format! Example: Saint Patric 5\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>City</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.city\" #city=\"ngModel\" name=\"input_city\"\r\n             pattern=  \"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"city.invalid && city.errors?.pattern\">\r\n        Invalid city name! Example: New York\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Country</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.country\" #country=\"ngModel\"  name=\"input_country\"\r\n             pattern= \"([A-Z][a-z]+[ ]*){1,}\" required>\r\n      <mat-error *ngIf=\"country.invalid && country.errors?.pattern\">\r\n        Invalid country name! Example: New York\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Phone number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.phone_number\" #phone_number=\"ngModel\" name=\"input_phone_number\"\r\n             pattern= \"[0-9]{3,3}-[0-9]{3,3}-[0-9]{3,3}\" required>\r\n      <mat-error *ngIf=\"phone_number.invalid && phone_number.errors?.pattern\">\r\n        Invalid phone number! Example: 063-478-856\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Insurance number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.insurance_number\" #insurance_number=\"ngModel\" name=\"input_insurance_number\"\r\n             pattern= \"[A-Z0-9]+\" required [disabled]=\"true\">\r\n      <mat-error *ngIf=\"insurance_number.invalid && insurance_number.errors?.pattern\">\r\n        Invalid insurance number! Example: ABC123\r\n      </mat-error>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Update profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicAdminGuardService {\r\n\r\n  constructor(private router: Router,private authservice: AuthenticationService) { }\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    //ovde ide check da li je trenutni korisnik pacijent\r\n    if(sessionStorage.getItem('role')===(\"ROLE_CLINIC_ADMIN\")){\r\n      return true;\r\n    }\r\n    else{\r\n      this.router.navigate(['']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClinicCenterAdminGuardService {\r\n\r\n  constructor(private router: Router,private authservice: AuthenticationService) { }\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    \r\n    if(sessionStorage.getItem('role')===(\"ROLE_CLINIC_CENTER_ADMIN\")){\r\n      return true;\r\n    }\r\n    else{\r\n      this.router.navigate(['']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LoginGuardService {\r\n\r\n  constructor(private router: Router,private authservice: AuthenticationService) { }\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    //ovde ide check da li je trenutni korisnik pacijent\r\n    if(this.authservice.isUserLoggedIn()){\r\n\r\n      if (sessionStorage.getItem('role') === \"ROLE_CLINIC_ADMIN\"){\r\n        this.router.navigate(['/AddDoctorFormComponent']);\r\n      }\r\n      else if (sessionStorage.getItem('role') === \"ROLE_CLINIC_CENTER_ADMIN\"){\r\n        \r\n        this.router.navigate(['/addClinicCenterAdministrator']);\r\n      }\r\n      else if (sessionStorage.getItem('role') === \"ROLE_DOCTOR\"){\r\n        this.router.navigate(['/viewPatients']);\r\n      }\r\n      else if (sessionStorage.getItem('role') === \"ROLE_NURSE\"){\r\n        this.router.navigate(['/viewPatients']);\r\n      }\r\n      else if (sessionStorage.getItem('role') === \"ROLE_PATIENT\"){\r\n        this.router.navigate(['/patient/clinics']);\r\n      }\r\n      return false;\r\n    }\r\n    else{\r\n\r\n      return true;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MedicallStuffGuardService {\r\n\r\n  constructor(private router: Router,private authservice: AuthenticationService) { }\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    //ovde ide check da li je trenutni korisnik pacijent\r\n    if(sessionStorage.getItem('role')===(\"ROLE_NURSE\") || sessionStorage.getItem('role')===(\"ROLE_DOCTOR\")){\r\n      return true;\r\n    }\r\n    else{\r\n      this.router.navigate(['']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot, Router } from '@angular/router';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class PatientGuardService implements CanActivate {\r\n\r\n  constructor(private router: Router,private authservice: AuthenticationService) { }\r\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean {\r\n    //ovde ide check da li je trenutni korisnik pacijent\r\n    if(sessionStorage.getItem('role')===(\"ROLE_PATIENT\")){\r\n      return true;\r\n    }\r\n    else{\r\n      this.router.navigate(['']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {FormBuilder, FormGroup} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n\r\n\r\n\r\n  username : String = '';\r\n  password : String = '';\r\n  password2 :String = '';\r\n\r\n  myModel : model = {\r\n    email : \"\",\r\n    password : \"\"\r\n  }\r\n\r\n  status : boolean = false;\r\n\r\n  model: patientModel = {\r\n    email : '',\r\n    password : '',\r\n    name : '',\r\n    surname : '',\r\n    address : '',\r\n    city : '',\r\n    country : '',\r\n    phone_number : '',\r\n    insurance_number : ''\r\n  }\r\n\r\n  hide : boolean = true;\r\n  hide1: boolean = true;\r\n  hide2: boolean = true;\r\n\r\n  response : any;\r\n\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http : HttpClient, private authservice : AuthenticationService) {\r\n\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.status = false;\r\n  }\r\n\r\n  loginAuth(){\r\n    console.log(this.status);\r\n    this.authservice.authenticate(this.myModel).then( num => {\r\n      this.status = (num === 401);\r\n      document.getElementById('validation').style.display = 'block'}\r\n    );\r\n    /*console.log(newStatus);\r\n    this.status = newStatus;*/\r\n\r\n  }\r\n\r\n  registerPatient(): void{\r\n    let url = \"http://localhost:8081/registrationRequests/register\"\r\n    this.http.post(url,this.model).subscribe(\r\n      res => {\r\n        this._snackBar.open(\"Your registration request has been sent! Your activation link will be sent to you soon.\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if(err.status == 409)\r\n        {\r\n          console.log(err.error)\r\n          if(err.error === 'email'){\r\n            this._snackBar.open(\"Email already taken!\", \"Close\", {\r\n              duration: 2000,\r\n            });\r\n          }else{\r\n            this._snackBar.open(\"Insurance number already taken!\", \"Close\", {\r\n              duration: 2000,\r\n            });\r\n          }\r\n\r\n\r\n        }\r\n        else\r\n        {\r\n          this._snackBar.open(\"Error has occurred while registering your profile!\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  checkPassword():boolean\r\n  {\r\n    let pass1 = this.model.password;\r\n    let pass2 = this.password2;\r\n    if(pass1 === pass2)\r\n    {\r\n\r\n      return true;\r\n    }\r\n    else\r\n    {\r\n      this._snackBar.open(\"Passwords do not match!\", \"Close\", {\r\n        duration: 2000,\r\n      });\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n}\r\n\r\nexport interface model{\r\n  email: String;\r\n  password : String;\r\n}\r\n\r\nexport interface patientModel{\r\n  email : string |RegExp;\r\n  password : string;\r\n  name : string |RegExp;\r\n  surname : string |RegExp;\r\n  address : string |RegExp;\r\n  city : string |RegExp;\r\n  country : string |RegExp;\r\n  phone_number : string |RegExp;\r\n  insurance_number : string |RegExp;\r\n}\r\n","\r\n<div style=\"display:inline;\">\r\n    <mat-tab-group style=\"margin-left: auto; margin-right : auto;width: 50%;padding-top: 2%\" appearance=\"outline\">\r\n        <mat-tab label=\"Login\">\r\n        <div>\r\n            <form  #f=\"ngForm\" (submit)=\"loginAuth()\" style=\"display: inline-block;margin-right: auto;margin-left: auto; padding-top: 5%; padding-bottom: 5% ;width: 37%\">\r\n\r\n                <mat-error id=\"validation\" style=\"display: none;padding-left:86%; width: 180%\">\r\n                  Email or password are incorrect.\r\n                </mat-error>\r\n\r\n                <br>\r\n\r\n                <mat-form-field appearance=\"outline\" style=\"padding-left:80%; width: 180%\">\r\n                    <mat-label>Email</mat-label>\r\n                    <input matInput  [(ngModel)] = \"myModel.email\" name=\"input_email\"\r\n                    #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n                    required/>\r\n                    <mat-error *ngIf=\" email.invalid\">\r\n                        Example: example_1@mail.com\r\n                    </mat-error>\r\n                </mat-form-field>\r\n\r\n                <mat-form-field appearance=\"outline\" style=\"padding-left:80%; width: 180%\">\r\n                    <mat-label>Password</mat-label>\r\n                    <input matInput  [(ngModel)] = \"myModel.password\" #password=\"ngModel\" name=\"input_password\"\r\n                            required minlength=\"8\"\r\n                            [type]=\"hide ? 'password' : 'text'\">\r\n\r\n                    <mat-icon matSuffix (click)=\"hide = !hide\">{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                    <mat-error *ngIf=\"password.invalid\">\r\n                        Password field must be at least 8 characters long!\r\n                    </mat-error>\r\n\r\n                </mat-form-field>\r\n                <div style=\"text-align: center;\">\r\n                    <button mat-raised-button style=\"margin-left: 110%; width: 100px;\" >Login</button>\r\n\r\n                </div>\r\n\r\n            </form>\r\n        </div>\r\n        </mat-tab>\r\n        <mat-tab label=\"Registration\">\r\n          <div >\r\n            <form  #f1=\"ngForm\" (submit)=\"f1.form.valid && checkPassword() && registerPatient()\" style=\"padding-left: 23%;padding-bottom: 2%;padding-top: 3%;\">\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n                <mat-label>Name</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n                       pattern=\"[A-Z][a-z]*\" required/>\r\n                <mat-error *ngIf=\"name.invalid && name.errors?.pattern\">\r\n                  Invalid name format! Example: Mike\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n                <mat-label>Surname</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n                       pattern= \"[A-Z][a-z]*\" required/>\r\n                <mat-error *ngIf=\"surname.invalid && surname.errors?.pattern\">\r\n                  Invalid surname format! Example: Portman\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <br>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n                <mat-label>Password</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.password\" #password=\"ngModel\" name=\"input_password\"\r\n                       required minlength=\"8\"  [type]=\"hide1 ? 'password' : 'text'\"/>\r\n                <mat-icon matSuffix (click)=\"hide1 = !hide1\">{{hide1 ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                <mat-error *ngIf=\"password.invalid\">\r\n                  Password field must be at least 8 characters long!\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n                <mat-label>Confirm password</mat-label>\r\n                <input matInput  [(ngModel)] = \"password2\" #password=\"ngModel\" name=\"input_password2\"\r\n                       required minlength=\"8\"  [type]=\"hide2 ? 'password' : 'text'\"/>\r\n                <mat-icon matSuffix (click)=\"hide2 = !hide2\">{{hide2 ? 'visibility_off' : 'visibility'}}</mat-icon>\r\n                <mat-error *ngIf=\"password.invalid\">\r\n                  Password field must be at least 8 characters long!\r\n                  </mat-error>\r\n              </mat-form-field>\r\n\r\n              <br>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n                <mat-label>Email</mat-label>\r\n                <input matInput\r\n                       [(ngModel)] = \"model.email\" name=\"input_email\"\r\n                       #email=\"ngModel\" pattern=\"[a-z]+[a-z0-9._]*[a-z0-9]+@[a-z]*.com\"\r\n                       required/>\r\n                <mat-error *ngIf=\" email.invalid\">\r\n                  Invalid email format! Example: example_1@mail.com\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n                <mat-label>Address</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.address\" #address=\"ngModel\"  name=\"input_address\"\r\n                       pattern=\"([A-Z][a-z]+[ ]*){1,}[0-9]+\" required/>\r\n                <mat-error *ngIf=\"address.invalid && address.errors?.pattern\">\r\n                  Invalid address format! Example: Saint Patric 5\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <br>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\" width: 250px;\">\r\n                <mat-label>City</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.city\" #city=\"ngModel\" name=\"input_city\"\r\n                       pattern=  \"^([A-Z][a-z]+[ ]*){1,}\" required/>\r\n                <mat-error *ngIf=\"city.invalid && city.errors?.pattern\">\r\n                  Invalid city name! Example: New York\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\" padding-left: 25px;width: 250px;\">\r\n                <mat-label>Country</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.country\" #country=\"ngModel\"  name=\"input_country\"\r\n                       pattern= \"([A-Z][a-z]+[ ]*){1,}\" required/>\r\n                <mat-error *ngIf=\"country.invalid && country.errors?.pattern\">\r\n                  Invalid country name! Example: New York\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <br>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n                <mat-label>Phone number</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.phone_number\" #phone_number=\"ngModel\" name=\"input_phone_number\"\r\n                       pattern= \"[0-9]{3,3}-[0-9]{3,3}-[0-9]{3,3}\" required/>\r\n                <mat-error *ngIf=\"phone_number.invalid && phone_number.errors?.pattern\">\r\n                  Invalid phone number! Example: 063-478-856\r\n                </mat-error>\r\n              </mat-form-field>\r\n\r\n              <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n                <mat-label>Insurance number</mat-label>\r\n                <input matInput  [(ngModel)] = \"model.insurance_number\" #insurance_number=\"ngModel\" name=\"input_insurance_number\"\r\n                       pattern= \"[A-Z0-9]+\" required/>\r\n                <mat-error *ngIf=\"insurance_number.invalid && insurance_number.errors?.pattern\">\r\n                  Invalid insurance number! Example: ABC123\r\n                </mat-error>\r\n              </mat-form-field>\r\n              <br>\r\n              <br>\r\n              <div style=\"text-align: center;\">\r\n                <button mat-raised-button style=\"margin-right: 31%; width: 100px;\" >Register</button>\r\n\r\n            </div>\r\n\r\n              <br>\r\n            </form>\r\n          </div>\r\n        </mat-tab>\r\n    </mat-tab-group>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { AuthenticationService } from '../services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-navigation',\r\n  templateUrl: './navigation.component.html',\r\n  styleUrls: ['./navigation.component.css']\r\n})\r\nexport class NavigationComponent implements OnInit {\r\n\r\n  currentRole : String = null;\r\n  editProfile : String = null;\r\n\r\n  constructor(private authservice : AuthenticationService) {\r\n\r\n   }\r\n\r\n  ngOnInit(): void {\r\n\r\n  }\r\n\r\n  checkPatient(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_PATIENT\"){\r\n      this.editProfile = \"patient/viewProfile\";\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkDoctor(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_DOCTOR\"){\r\n      this.editProfile = \"staff/viewProfile\";\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkCAdmin(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_CLINIC_ADMIN\"){\r\n      this.editProfile = \"clinicAdmin/viewProfile\"\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkCCAdmin(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_CLINIC_CENTER_ADMIN\"){\r\n      this.editProfile = \"clinicCenterAdmin/viewProfile\"\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkNurse(){\r\n    if(sessionStorage.getItem('role') === \"ROLE_NURSE\"){\r\n      this.editProfile = \"staff/viewProfile\";\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  checkLogged(){\r\n    if(sessionStorage.getItem('role') != null){\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  logout(){\r\n    this.authservice.logOut();\r\n  }\r\n\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n\r\n  <span class=\"material-icons\" style=\"margin-left: 3%;\">local_hospital</span>\r\n\r\n  <span>eClinic</span>\r\n\r\n\r\n  <!--Patient-->\r\n  <a *ngIf=\"checkPatient()\" routerLink=\"/patient/clinics\" style=\"margin-left: 5%;\" ><button mat-flat-button color=\"primary\" >Clinics</button></a>\r\n\r\n  <!--Clinic Admin-->\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addDoctor\" style=\"margin-left: 5%;\" ><button mat-flat-button color=\"primary\" >Doctors</button></a>\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addPredefinedAppointment\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Appointments</button></a>\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addAppointmentType\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Appointment types</button></a>\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addHall\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Halls</button></a>\r\n  <a *ngIf=\"checkCAdmin()\" routerLink=\"clinicAdmin/addNurse\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Nurses</button></a>\r\n\r\n  <!--ClinicCenterAdmin-->\r\n  <button *ngIf=\"checkCCAdmin()\" button mat-flat-button color=\"primary\" style=\"margin-left: 3%;\" [matMenuTriggerFor]=\"menu\">Administrators</button>\r\n  <mat-menu #menu=\"matMenu\">\r\n    <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addClinicAdministrator\" style=\"margin-left: 3%;\" ><button mat-flat-button >Clinic Adminstrator</button></a>\r\n    <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addClinicCenterAdministrator\" style=\"margin-left: 3%;\" ><button mat-flat-button  >Clinic Center Adminstrator</button></a>\r\n  </mat-menu>\r\n\r\n  <button *ngIf=\"checkCCAdmin()\" button mat-flat-button color=\"primary\" style=\"margin-left: 3%;\" [matMenuTriggerFor]=\"menu1\">Clinics</button>\r\n  <mat-menu #menu1=\"matMenu\">\r\n    <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addClinic\" style=\"margin-left: 3%;\" ><button mat-flat-button >Add clinic</button></a>\r\n    <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/viewClinics\" style=\"margin-left: 3%;\" ><button mat-flat-button  >View clinics</button></a>\r\n  </mat-menu>\r\n\r\n  <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addMedicine\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Medicine</button></a>\r\n  <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/addDiagnosis\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Diagnosis</button></a>\r\n  <a *ngIf=\"checkCCAdmin()\" routerLink=\"clinicCenterAdmin/requestTable\" style=\"margin-left: 3%;\" ><button mat-flat-button color=\"primary\" >Requests</button></a>\r\n\r\n  <!--Doctor-->\r\n  <a *ngIf=\"checkDoctor()\" routerLink=\"staff/viewPatients\" style=\"margin-left: 5%;\" ><button mat-flat-button color=\"primary\" >Patients</button></a>\r\n  <!--Nurse-->\r\n  <a *ngIf=\"checkNurse()\" routerLink=\"staff/viewPatients\" style=\"margin-left: 5%;\" ><button mat-flat-button color=\"primary\" >Patients</button></a>\r\n\r\n\r\n  <!--Kod svakog proverava koji je user jer svako ima da edituje svoj profil-->\r\n  <span class=\"example-spacer\"> </span>\r\n  <a *ngIf=\"checkLogged()\" href=\"#\" style=\"margin-left: 2%;\" ><mat-icon (click)=\"logout()\" [ngStyle]=\"{'color':'white'}\">exit_to_app</mat-icon></a>\r\n  <a *ngIf=\"checkLogged()\" routerLink=\"{{this.editProfile}}\" style=\"margin-left: 1%;\" ><mat-icon [ngStyle]=\"{'color':'white'}\">face</mat-icon></a>\r\n\r\n</mat-toolbar>\r\n","import { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { MatPaginator } from '@angular/material/paginator';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\nimport { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { MatDialog } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-clinics',\r\n  templateUrl: './clinics.component.html',\r\n  styleUrls: ['./clinics.component.css']\r\n})\r\nexport class ClinicsComponent implements OnInit {\r\n\r\n  displayedColumns: string[] = ['name', 'address', 'avg_rating', 'price'];\r\n\r\n  dataSource = new MatTableDataSource();\r\n\r\n  selectedRowIndex: number = 0;\r\n\r\n  appointmentType_id : number = 0;\r\n\r\n  appointmentTypes : any=[];\r\n\r\n  model : ClinicModel = {\r\n    name : '',\r\n    address : '',\r\n    avg_rating : 0,\r\n    price : 0\r\n  }\r\n\r\n  searchModel : SearchClinicModel = {\r\n    date : '',\r\n    appointmentType_id : 0,\r\n    address : '',\r\n    avg_rate_lowest : 0,\r\n    avg_rate_highest : 0\r\n  }\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) { }\r\n\r\n  ngOnInit(): void {\r\n    let params = new HttpParams();\r\n    params = params.append('date', \"0\")\r\n    params = params.append('appointmentType_id', this.searchModel.appointmentType_id.toString());\r\n    params = params.append('address', \"0\");\r\n    params = params.append('avg_rate_lowest', \"0\");\r\n    params = params.append('avg_rate_highest', \"0\");\r\n    \r\n    this.http.get(\"http://localhost:8081/patients/getClinics\",{params:params})\r\n    .subscribe((res) => {\r\n      // @ts-ignore\r\n      this.dataSource.data = res;\r\n\r\n    });\r\n    \r\n    \r\n    this.dataSource.paginator = this.paginator;\r\n    this.selectedRowIndex  = 1;\r\n\r\n    this.http.get(\"http://localhost:8081/appointmentType/getAppointmentTypes\").subscribe(\r\n      (res) =>{\r\n        this.appointmentTypes = res;\r\n      }\r\n    );\r\n\r\n  }\r\n}\r\n\r\nexport interface ClinicModel{\r\n   name: String,\r\n   address : String,\r\n   avg_rating : number,\r\n   price : number\r\n}\r\n\r\nexport interface SearchClinicModel{\r\n  date : String,\r\n  appointmentType_id : number,\r\n  address : String,\r\n  avg_rate_lowest : number,\r\n  avg_rate_highest : number\r\n}","<br>\r\n<h1 style=\"margin-left: 30px;\">Make appointment: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div>\r\n    <form  #f=\"ngForm\"  style=\"padding-left: 25px;\">\r\n    <div>\r\n        <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n            <mat-label>Choose a date</mat-label>\r\n            <input matInput [matDatepicker]=\"picker\" readonly required>\r\n            <mat-datepicker-toggle matSuffix [for]=\"picker\"></mat-datepicker-toggle>\r\n            <mat-datepicker #picker ></mat-datepicker>\r\n        </mat-form-field>\r\n\r\n        <mat-form-field appearance=\"outline\" style=\"width: 280px;padding-left: 20px; padding-right: 20px;\">\r\n            <mat-label>Appointment type</mat-label>\r\n            <mat-select [(ngModel)] = \"searchModel.appointmentType_id\" name=\"appointment_type_id\"\r\n                #appointmentType_id=\"ngModel\" required >\r\n                <mat-option *ngFor=\"let a of appointmentTypes\" [value]=\"a.id\" >{{a.name}}</mat-option>\r\n            </mat-select>\r\n        </mat-form-field>\r\n\r\n        <button mat-raised-button style=\"width: 120px\" >Search...</button>\r\n\r\n    </div>\r\n    \r\n\r\n    <div class=\"mat-elevation-z8\" style=\"width: 800px;float:left;\">\r\n\r\n        <table mat-table [dataSource]=\"dataSource\" >\r\n\r\n            <ng-container matColumnDef=\"name\">\r\n              <th mat-header-cell *matHeaderCellDef> Name </th>\r\n              <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"address\">\r\n                <th mat-header-cell *matHeaderCellDef> Address </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\r\n              </ng-container>\r\n\r\n            <ng-container matColumnDef=\"avg_rating\">\r\n                <th mat-header-cell *matHeaderCellDef> Average rate </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.avg_rating}} </td>\r\n            </ng-container>\r\n\r\n            <ng-container matColumnDef=\"price\">\r\n                <th mat-header-cell *matHeaderCellDef> Price </th>\r\n                <td mat-cell *matCellDef=\"let element\"> {{element.price}} </td>\r\n            </ng-container>\r\n        \r\n            <tr mat-header-row *matHeaderRowDef=\"displayedColumns\" style=\"background: transparent !important;\"></tr>\r\n            <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\" ></tr>\r\n\r\n        </table>\r\n\r\n        <mat-paginator [pageSizeOptions]=\"[5]\" showFirstLastButtons></mat-paginator>\r\n\r\n    </div>\r\n    \r\n    <div style=\"float: left;display: block;width: 40%;padding-left: 5% ;\">\r\n        <mat-expansion-panel  >\r\n            <mat-expansion-panel-header>\r\n            <mat-panel-title>\r\n                More options\r\n            </mat-panel-title>\r\n            <mat-panel-description>\r\n                Type clinic address and average rate\r\n            </mat-panel-description>\r\n            </mat-expansion-panel-header>\r\n        \r\n            <mat-form-field style=\"width: 40%;\">\r\n            <mat-label>Clinic Address</mat-label>\r\n            <input matInput>\r\n            </mat-form-field>\r\n        \r\n            <div style=\"display: block;\">\r\n                <mat-form-field style=\"width: 40%;\">\r\n                    <mat-label>Lowest rate</mat-label>\r\n                    <input matInput type=\"number\" min=\"1\">\r\n                </mat-form-field>\r\n\r\n                <mat-form-field style=\"padding-left: 20px ;width: 40%;\">\r\n                    <mat-label>Highest rate</mat-label>\r\n                    <input matInput type=\"number\" min=\"1\">\r\n                </mat-form-field>\r\n            </div>\r\n        </mat-expansion-panel>\r\n    </div>\r\n\r\n    </form>\r\n</div>\r\n","import {Component, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatTableDataSource} from \"@angular/material/table\";\r\nimport {MatPaginator} from \"@angular/material/paginator\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from \"@angular/material/dialog\";\r\n\r\n\r\n@Component({\r\n  selector: 'request-list-patients',\r\n  templateUrl: './request-list-patients.component.html',\r\n  styleUrls: ['./request-list-patients.component.css']\r\n})\r\nexport class RequestListPatientsComponent implements OnInit {\r\n  displayedColumns: string[] = ['email', 'name', 'surname', 'address',\r\n    'city', 'country', 'phone_number', 'insurance_number', 'accept', 'decline'];\r\n\r\n  dataSource = new MatTableDataSource();\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  text: string;\r\n  sent: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              public dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.http.get(\"http://localhost:8081/registrationRequests/getRequests\")\r\n      .subscribe((res) => {\r\n        // @ts-ignore\r\n        this.dataSource.data = res;\r\n\r\n      });\r\n\r\n    this.dataSource.paginator = this.paginator;\r\n\r\n  }\r\n\r\n  Accept(req): void {\r\n\r\n    let url = \"http://localhost:8081/patients/addPatient\"\r\n    this.http.post(url, req).subscribe(\r\n      res => {\r\n        let index = this.dataSource.data.indexOf(req);\r\n        this.dataSource.data.splice(index, 1);\r\n        this.dataSource._updateChangeSubscription()\r\n        this._snackBar.open(\"Patient registered\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n\r\n      },\r\n      err => {\r\n        if (err.status == 409) {\r\n          this._snackBar.open(\"Patient already exists with\" + req.email + \"email\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n        } else {\r\n          this._snackBar.open(\"Error has occurred while registering patient\", \"Close\", {\r\n            duration: 2000,\r\n          });\r\n          console.log(err);\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  Decline(req): void {\r\n    const dialogRef = this.dialog.open(DialogOverview, {\r\n      width: '25%',height: '40%',\r\n      data: {text: this.text, sent:this.sent}\r\n    });\r\n\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      req.text = result.text;\r\n      if(req.text == null)\r\n      {\r\n        this._snackBar.open(\"Message not sent! Sent body can't be empty!\", \"Close\", {\r\n          duration: 2000,\r\n        });\r\n      }\r\n\r\n      if(result.sent === true && req.text != null)\r\n      {\r\n        let url = \"http://localhost:8081/registrationRequests/declineRequest\"\r\n        this.http.post(url, req).subscribe(\r\n          res => {\r\n            let index = this.dataSource.data.indexOf(req);\r\n            this.dataSource.data.splice(index, 1);\r\n            this.dataSource._updateChangeSubscription()\r\n            this._snackBar.open(\"Request declined!\", \"Close\", {\r\n              duration: 2000,\r\n            });\r\n\r\n          },\r\n          err => {\r\n            if (err.status == 409) {\r\n              this._snackBar.open(\"Patient already exists with\" + req.email + \"email!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n            } else {\r\n              this._snackBar.open(\"Error has occurred while declining registering patient!\", \"Close\", {\r\n                duration: 2000,\r\n              });\r\n              console.log(err);\r\n            }\r\n          }\r\n        );\r\n      }\r\n\r\n\r\n    });\r\n  }\r\n\r\n}\r\n\r\nexport interface DialogData {\r\n  text: string;\r\n  sent: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'request-list-patients',\r\n  templateUrl: './dialog-overview.html',\r\n  styleUrls: ['./request-list-patients.component.css']\r\n})\r\nexport class DialogOverview {\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<DialogOverview>,\r\n    @Inject(MAT_DIALOG_DATA) public data: DialogData) {}\r\n\r\n  onClick(): boolean {\r\n\r\n    return false;\r\n  }\r\n\r\n  Send(): boolean{\r\n    return true;\r\n  }\r\n\r\n}\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Table of requests </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"dataSource\">\r\n\r\n    <ng-container matColumnDef=\"email\">\r\n      <th mat-header-cell *matHeaderCellDef> Email </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef> Name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <th mat-header-cell *matHeaderCellDef> Surname </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.surname}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"address\">\r\n      <th mat-header-cell *matHeaderCellDef> Address </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"city\">\r\n      <th mat-header-cell *matHeaderCellDef> City </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.city}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"country\">\r\n      <th mat-header-cell *matHeaderCellDef> Country </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.country}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"phone_number\">\r\n      <th mat-header-cell *matHeaderCellDef> Phone number </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.phone_number}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"insurance_number\">\r\n      <th mat-header-cell *matHeaderCellDef> Insurance number </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.insurance_number}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"accept\">\r\n      <th mat-header-cell *matHeaderCellDef>  </th>\r\n      <td mat-cell *matCellDef=\"let element\">  <button mat-button (click)=\"Accept(element)\" >Accept</button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"decline\">\r\n      <th mat-header-cell *matHeaderCellDef>  </th>\r\n      <td mat-cell *matCellDef=\"let element\">  <button mat-button (click)=\"Decline(element)\" >Decline</button>\r\n      </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n","<h2 mat-dialog-title style=\"text-align: center\">Send declinance mail</h2>\r\n<div mat-dialog-content>\r\n  <mat-form-field>\r\n    <textarea matInput rows=\"5\" [(ngModel)]=\"data.text\"> </textarea>\r\n  </mat-form-field>\r\n</div>\r\n<div mat-dialog-actions>\r\n\r\n  <mat-dialog-actions>\r\n    <button mat-button [mat-dialog-close]=\"data\" (click)=\"data.sent = onClick()\">Cancel</button>\r\n    <button mat-button [mat-dialog-close]=\"data\" (click)=\"data.sent = Send()\">Send</button>\r\n  </mat-dialog-actions>\r\n\r\n</div>\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { map } from 'rxjs/operators';\r\nimport * as jwt_decode from 'jwt-decode';\r\nimport { Router } from '@angular/router';\r\n\r\nexport class User{\r\n  constructor(\r\n    public token:string,\r\n     ) {}\r\n\r\n}\r\n\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthenticationService {\r\n\r\n  constructor(\r\n    private httpClient:HttpClient,private router: Router\r\n  ) { }\r\n\r\n  authenticate(model):Promise<number> {\r\n    let status = 0;\r\n    let promise  =  new Promise<number>((resolve,reject) => {\r\n      this.httpClient.post('http://localhost:8081/auth/login',model).toPromise().then(\r\n        res => {\r\n          let tokenStr= 'Bearer ' + res['accessToken'];\r\n          sessionStorage.setItem('token', tokenStr);\r\n          let decoded = jwt_decode(res['accessToken']);\r\n          sessionStorage.setItem('user_id', decoded['id']);\r\n          sessionStorage.setItem('role', decoded['role']);\r\n          console.log(decoded['role']);\r\n          console.log(\"USAO\");\r\n          console.log(sessionStorage.getItem('role'));\r\n          console.log(tokenStr);\r\n          if (sessionStorage.getItem('role') === \"ROLE_CLINIC_ADMIN\"){\r\n            this.router.navigate(['/clinicAdmin/addDoctor']);\r\n          }\r\n          else if (sessionStorage.getItem('role') === \"ROLE_CLINIC_CENTER_ADMIN\"){\r\n            this.router.navigate(['/clinicCenterAdmin/addClinicCenterAdministrator']);\r\n          }\r\n          else if (sessionStorage.getItem('role') === \"ROLE_DOCTOR\"){\r\n            this.router.navigate(['staff/viewPatients']);\r\n          }\r\n          else if (sessionStorage.getItem('role') === \"ROLE_NURSE\"){\r\n            this.router.navigate(['staff/viewPatients']);\r\n          }\r\n          else if (sessionStorage.getItem('role') === \"ROLE_PATIENT\"){\r\n            this.router.navigate(['/patient/clinics']);\r\n          }\r\n          status = 200;\r\n          console.log(200);\r\n          resolve(200);\r\n        },\r\n        err => {\r\n          if (err.status === 401) {\r\n            console.log(401);\r\n\r\n            status = 401;\r\n            resolve(401);\r\n          }\r\n        }\r\n      )\r\n    });\r\n\r\n    return promise;\r\n\r\n    /*this.httpClient.post('http://localhost:8081/auth/login',model).subscribe(\r\n       res => {\r\n        let tokenStr= 'Bearer ' + res['accessToken'];\r\n        sessionStorage.setItem('token', tokenStr);\r\n        let decoded = jwt_decode(res['accessToken']);\r\n        sessionStorage.setItem('user_id', decoded['id']);\r\n        sessionStorage.setItem('role', decoded['role']);\r\n        if (sessionStorage.getItem('role') === \"ROLE_CLINIC_ADMIN\"){\r\n          this.router.navigate(['/clinicAdmin/addDoctor']);\r\n        }\r\n        else if (sessionStorage.getItem('role') === \"ROLE_CLINIC_CENTER_ADMIN\"){\r\n          this.router.navigate(['/clinicCenterAdmin/addClinicCenterAdministrator']);\r\n        }\r\n        else if (sessionStorage.getItem('role') === \"ROLE_DOCTOR\"){\r\n          this.router.navigate(['/viewPatients']);\r\n        }\r\n        else if (sessionStorage.getItem('role') === \"ROLE_NURSE\"){\r\n          this.router.navigate(['/viewPatients']);\r\n        }\r\n        else if (sessionStorage.getItem('role') === \"ROLE_PATIENT\"){\r\n          this.router.navigate(['/patient/clinics']);\r\n        }\r\n        status = 200;\r\n        return new Promise<>\r\n      },\r\n      err => {\r\n        console.log(err.status);\r\n        if (err.status === 401) {\r\n          status = 401;\r\n          console.log(\"Vracam status\" + status)\r\n          return status;\r\n        }\r\n      }\r\n     );*/\r\n  }\r\n\r\n\r\nisUserLoggedIn() {\r\n  let token = sessionStorage.getItem('token');\r\n  return !(token === null)\r\n}\r\n\r\nlogOut() {\r\n  sessionStorage.removeItem('token');\r\n  sessionStorage.removeItem('role');\r\n  sessionStorage.removeItem('id');\r\n  this.router.navigate(['']);\r\n}\r\n\r\ngetCurrentUserId(){\r\n    return sessionStorage.getItem('id');\r\n\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InterceptorService implements HttpInterceptor {\r\n\r\n  constructor() { }\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\r\n\r\n    if (sessionStorage.getItem('token')) {\r\n      req = req.clone({\r\n        setHeaders: {\r\n          Authorization: sessionStorage.getItem('token')\r\n        }\r\n      })\r\n    }\r\n    return next.handle(req);\r\n\r\n  }\r\n}\r\n","import {Component, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-view-clinic-administrator',\r\n  templateUrl: './view-clinic-administrator.component.html',\r\n  styleUrls: ['./view-clinic-administrator.component.css']\r\n})\r\nexport class ViewClinicAdministratorComponent implements OnInit{\r\n\r\n  model: clinicAdminModel = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: '',\r\n    clinic: new class implements clinicModel {\r\n      address: '';\r\n      description: '';\r\n      name: '';\r\n    }\r\n  }\r\n  hide: boolean;\r\n  clinic_info : string;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n\r\n    this.http.get(\"http://localhost:8081/clinicAdministrator/getClinicAdministrator\")\r\n      .subscribe((res)=>{\r\n        this.model = <clinicAdminModel>res;\r\n        this.clinic_info = this.model.clinic.name + \", \" + this.model.clinic.address;\r\n      });\r\n    this.hide = true;\r\n\r\n  }\r\n\r\n  goToEdit(): void {\r\n    let booleanPromise = this.router.navigate([\"../editProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport interface clinicAdminModel\r\n{\r\n  name: string | RegExp;\r\n  surname: string | RegExp;\r\n  email: string | RegExp;\r\n  password: string;\r\n  clinic: clinicModel;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">View profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"goToEdit()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Clinic</mat-label>\r\n      <input matInput  [(ngModel)] = \"clinic_info\" #clinic=\"ngModel\"  name=\"input_clinic\" [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Edit profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {clinicModel} from \"../add-clinic-form/add-clinic-form.component\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-view-clinic-center-administrator',\r\n  templateUrl: './view-clinic-center-administrator.component.html',\r\n  styleUrls: ['./view-clinic-center-administrator.component.css']\r\n})\r\nexport class ViewClinicCenterAdministratorComponent implements OnInit{\r\n\r\n  model: clinicCenterAdminModel = {\r\n    name: '',\r\n    surname: '',\r\n    email: '',\r\n    password: '',\r\n\r\n  }\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n\r\n    this.http.get(\"http://localhost:8081/clinicCenterAdministrator/getClinicCenterAdministrator\")\r\n      .subscribe((res)=>{\r\n        this.model = <clinicCenterAdminModel>res;\r\n      });\r\n    this.hide = true;\r\n\r\n  }\r\n\r\n  goToEdit(): void {\r\n    let booleanPromise = this.router.navigate([\"../editProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n\r\n}\r\n\r\n\r\nexport interface clinicCenterAdminModel\r\n{\r\n  name: string | RegExp;\r\n  surname: string | RegExp;\r\n  email: string | RegExp;\r\n  password: string;\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">View profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"goToEdit()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Edit profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, Inject, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatTableDataSource} from \"@angular/material/table\";\r\nimport {MatPaginator} from \"@angular/material/paginator\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {MAT_DIALOG_DATA, MatDialog, MatDialogRef} from \"@angular/material/dialog\";\r\n\r\n\r\n@Component({\r\n  selector: 'view-clinics',\r\n  templateUrl: './view-clinics.component.html',\r\n  styleUrls: ['./view-clinics.component.css']\r\n})\r\nexport class ViewClinicsComponent implements OnInit {\r\n  displayedColumns: string[] = ['name', 'address', 'description'];\r\n\r\n  dataSource = new MatTableDataSource();\r\n\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              public dialog: MatDialog) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.http.get(\"http://localhost:8081/clinic/getClinics\")\r\n      .subscribe((res) => {\r\n        // @ts-ignore\r\n        this.dataSource.data = res;\r\n\r\n      });\r\n\r\n    this.dataSource.paginator = this.paginator;\r\n\r\n  }\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Table of clinics </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"dataSource\">\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef> Clinic name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"address\">\r\n      <th mat-header-cell *matHeaderCellDef> Clinic address </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"description\">\r\n      <th mat-header-cell *matHeaderCellDef> Clinic description </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.description}} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n","import {Component, Directive, Input, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {patientModel} from \"../edit-patient/edit-patient.component\";\r\nimport {AbstractControl, FormControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n@Component({\r\n  selector: 'app-view-medical-staff',\r\n  templateUrl: './view-medical-staff.component.html',\r\n  styleUrls: ['./view-medical-staff.component.css']\r\n})\r\nexport class ViewMedicalStaff implements OnInit{\r\n\r\n  model: medicalStaffModel = {\r\n    email : '',\r\n    password : '',\r\n    name : '',\r\n    surname : '',\r\n    type: '',\r\n    workStart: '',\r\n    workEnd: '',\r\n  }\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n    this.hide = true;\r\n    let url = \"http://localhost:8081/medicalStaff/getData\";\r\n    this.http.get(url).subscribe(\r\n      res => {\r\n        this.model = <medicalStaffModel>res;\r\n        this.model.password = '';\r\n      }\r\n    )\r\n  }\r\n\r\n  goToEdit(): void {\r\n    let booleanPromise = this.router.navigate([\"../editProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n}\r\nexport interface medicalStaffModel{\r\n  email : string |RegExp;\r\n  password : string;\r\n  name : string |RegExp;\r\n  surname : string |RegExp;\r\n  type : string;\r\n  workStart : string;\r\n  workEnd : string;\r\n\r\n}\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">View profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"goToEdit()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" [disabled]=\"true\"/>\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Type</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.type\" name=\"input_type\"\r\n             #email=\"ngModel\" [disabled]=\"true\"/>\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Edit profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, Directive, Input, OnInit} from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {AbstractControl, FormControl, NG_VALIDATORS, Validator, ValidatorFn, Validators} from \"@angular/forms\";\r\nimport {ActivatedRoute, Router} from \"@angular/router\";\r\n\r\n\r\n@Component({\r\n  selector: 'app-view-patient',\r\n  templateUrl: './view-patient.component.html',\r\n  styleUrls: ['./view-patient.component.css']\r\n})\r\nexport class ViewPatientProfile implements OnInit{\r\n\r\n  model: patientModel = {\r\n    email : '',\r\n    password : '',\r\n    name : '',\r\n    surname : '',\r\n    address : '',\r\n    city : '',\r\n    country : '',\r\n    phone_number : '',\r\n    insurance_number : ''\r\n  }\r\n  hide: boolean;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient,\r\n              private router: Router, private r:ActivatedRoute){\r\n\r\n  }\r\n\r\n  ngOnInit(): void{\r\n    this.hide = true;\r\n    let url = \"http://localhost:8081/patients/getPatient\";\r\n    this.http.get(url).subscribe(\r\n      res => {\r\n        this.model = <patientModel>res;\r\n        this.model.password = '';\r\n      }\r\n    )\r\n  }\r\n\r\n  goToEdit(): void {\r\n    let booleanPromise = this.router.navigate([\"../editProfile\"], {relativeTo: this.r});\r\n  }\r\n\r\n\r\n}\r\nexport interface patientModel{\r\n  email : string |RegExp;\r\n  password : string;\r\n  name : string |RegExp;\r\n  surname : string |RegExp;\r\n  address : string |RegExp;\r\n  city : string |RegExp;\r\n  country : string |RegExp;\r\n  phone_number : string |RegExp;\r\n  insurance_number : string |RegExp;\r\n}\r\n\r\n\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">View profile: </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div >\r\n  <form  #f=\"ngForm\" (submit)=\"goToEdit()\" style=\"padding-left: 25px;\">\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Name</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.name\" #name=\"ngModel\"  name=\"input_name\"\r\n             [disabled]=\"true\" >\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Surname</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.surname\" #surname=\"ngModel\" name=\"input_surname\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Email</mat-label>\r\n      <input matInput\r\n             [(ngModel)] = \"model.email\" name=\"input_email\"\r\n             #email=\"ngModel\" [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px; width: 250px;\">\r\n      <mat-label>Address</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.address\" #address=\"ngModel\"  name=\"input_address\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>City</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.city\" #city=\"ngModel\" name=\"input_city\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\" padding-left: 25px; width: 250px;\">\r\n      <mat-label>Country</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.country\" #country=\"ngModel\"  name=\"input_country\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"width: 250px;\">\r\n      <mat-label>Phone number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.phone_number\" #phone_number=\"ngModel\" name=\"input_phone_number\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <mat-form-field appearance=\"outline\" style=\"padding-left: 25px;  width: 250px;\">\r\n      <mat-label>Insurance number</mat-label>\r\n      <input matInput  [(ngModel)] = \"model.insurance_number\" #insurance_number=\"ngModel\" name=\"input_insurance_number\"\r\n             [disabled]=\"true\">\r\n    </mat-form-field>\r\n\r\n    <br>\r\n    <br>\r\n\r\n    <button mat-raised-button >Edit profile</button>\r\n\r\n\r\n  </form>\r\n</div>\r\n","import {Component, OnInit, ViewChild} from '@angular/core';\r\nimport {HttpClient} from '@angular/common/http';\r\nimport {MatTableDataSource} from \"@angular/material/table\";\r\nimport {MatSnackBar} from \"@angular/material/snack-bar\";\r\nimport {MatSort} from \"@angular/material/sort\";\r\nimport {MatPaginator} from \"@angular/material/paginator\";\r\n\r\n\r\n@Component({\r\n  selector: 'view-patients-nurse',\r\n  templateUrl: './view-patients-nurse.component.html',\r\n  styleUrls: ['./view-patients-nurse.component.css']\r\n})\r\nexport class ViewPatientsNurseComponent implements OnInit {\r\n  displayedColumns: string[] = ['email', 'name', 'surname', 'address',\r\n    'city', 'country', 'phone_number', 'insurance_number'];\r\n\r\n  dataSource = new MatTableDataSource();\r\n\r\n  @ViewChild(MatSort, {static: true}) sort: MatSort;\r\n  @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\r\n\r\n  constructor(private _snackBar: MatSnackBar, private http: HttpClient) {\r\n  }\r\n\r\n  ngOnInit(): void {\r\n\r\n\r\n    this.http.get(\"http://localhost:8081/medicalStaff/getPatients\")\r\n      .subscribe((res) => {\r\n        // @ts-ignore\r\n        this.dataSource.data = res;\r\n      });\r\n\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.paginator = this.paginator;\r\n\r\n  }\r\n\r\n\r\n\r\n}\r\n\r\n","<br>\r\n<h1 style=\"margin-left: 30px;\">Table of patients </h1>\r\n<mat-divider></mat-divider>\r\n<br>\r\n\r\n<div class=\"mat-elevation-z8\">\r\n  <table mat-table [dataSource]=\"dataSource\" matSort >\r\n\r\n    <ng-container matColumnDef=\"email\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Email </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.email}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"name\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Name </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"surname\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Surname </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.surname}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"address\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Address </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.address}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"city\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> City </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.city}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"country\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Country </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.country}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"phone_number\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Phone number </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.phone_number}} </td>\r\n    </ng-container>\r\n\r\n    <ng-container matColumnDef=\"insurance_number\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header> Insurance number </th>\r\n      <td mat-cell *matCellDef=\"let element\"> {{element.insurance_number}} </td>\r\n    </ng-container>\r\n\r\n    <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\r\n    <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\r\n  </table>\r\n\r\n  <mat-paginator [pageSizeOptions]=\"[5, 10, 20]\" showFirstLastButtons></mat-paginator>\r\n</div>\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}